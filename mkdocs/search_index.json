{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Utils Documentation\n\n\nHey thank you for enjoying to my personal documentation.\nYou will find useful tips for Git, MongoDB and more...    \n\n\nRequirements\n\n\nMAC OSX or a linux based OS\n\n\n\nUseful Links for Installation and More\n\n\nGit\n\n\nGrunt\n\n\nMongoDB\n\n\nPython\n\n\nMKDOCS\n\n\nContributing\n\n\nThis documentation it's very easy to use and customize.\n\n\nYou can clone it and use it for yourself by simply changing the remote path of the repo,\nmaking your changes, pushing it to master and then running the update script.\n\n\nOr you can just fork the repo and add your contribution with other useful tips!\n\n\nGh-Pages\n\n\nDo the magic!\n\n\nIt's an amazing service provided by GitHub that allow users\nto explore and display their projects directly from GitHub website by simply\ncreating a gh-pages branch and pushing the code on it.\n\n\nUsers will be able to explore the project from a link like\nyourGitHubUsername.github.io/repositoryName.\n\nLearn more.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome-to-utils-documentation", 
            "text": "Hey thank you for enjoying to my personal documentation.\nYou will find useful tips for Git, MongoDB and more...", 
            "title": "Welcome to Utils Documentation"
        }, 
        {
            "location": "/#requirements", 
            "text": "MAC OSX or a linux based OS", 
            "title": "Requirements"
        }, 
        {
            "location": "/#useful-links-for-installation-and-more", 
            "text": "Git  Grunt  MongoDB  Python  MKDOCS", 
            "title": "Useful Links for Installation and More"
        }, 
        {
            "location": "/#contributing", 
            "text": "This documentation it's very easy to use and customize.  You can clone it and use it for yourself by simply changing the remote path of the repo,\nmaking your changes, pushing it to master and then running the update script.  Or you can just fork the repo and add your contribution with other useful tips!", 
            "title": "Contributing"
        }, 
        {
            "location": "/#gh-pages", 
            "text": "Do the magic!  It's an amazing service provided by GitHub that allow users\nto explore and display their projects directly from GitHub website by simply\ncreating a gh-pages branch and pushing the code on it.  Users will be able to explore the project from a link like\nyourGitHubUsername.github.io/repositoryName. Learn more.", 
            "title": "Gh-Pages"
        }, 
        {
            "location": "/git/", 
            "text": "Git Utils\n\n\nHere you can find a basic walkthrough for the creation of a new Git repository\n\n\nInstall Git\n\n\nIf you don't have git installed you will need also to install brew package manager:\n\n\n- 'ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"'\n- 'brew install git'\n\n\n\nLocal Global Configuration\n\n\nFrom anyway on your command line:\n\n\n- 'git config --global user.name \nNAME\n'\n\n- 'git config --global user.email \nEMAIL\n'\n\n\n\nGitHub\n\n\nGo to github.com and create an account\n\n\nNew Repository\n\n\nTo create a new repository:\n\n\n- log to your account on github\n\n- create a repository\n\n- create a new folder wherever you want into your computer\n\n- navigate to the folder root from your command line\n\n- write the command: 'git init .'\n\n- create a new file with vim command: 'vim .gitignore' // press 'i' and insert the file or folder you want to not track with git\n\n- write the command: 'git remote add origin git@github.com:MyUsername/nameOfTheOnlineRepo.git'\n\n- write the command: 'git add .' // to start tracking the files\n\n- write the command: 'git commit -am \"initial-gitignore\"' // to archive your chagesets\n\n- write the command: 'git push -u origin master' // to push your changesets to the online repository // '-u' to set the branch as default\n\n\n\nDownload Mate Changesets\n\n\nMove to your command line window and type:\n\n\n- 'git pull'\n\n\n\nCheck Repository Status\n\n\nMove to your command line window and type:\n\n\n- 'git status'\n\n\n\nList branch\n\n\nMove to your command line window and type:\n\n\n- 'git branch -a'\n\n\n\nCreate and move to a new branch\n\n\nMove to your command line window and type:\n\n\n- 'git checkout -b nameOfTheBranch'\n\n- git push \nremote-name\n \nbranch-name\n\n\n\n\nMerging\n\n\nMove from the developing branch to the one which you want to import changesets:\n\n\n- 'git merge nameOfTheBranch'\n\n\n\nDelete file from repo\n\n\nMove to your command line window and type:\n\n\n- 'git rm fileName'\n\n- git commit -m \"remove fileName\"", 
            "title": "Git Utils"
        }, 
        {
            "location": "/git/#git-utils", 
            "text": "Here you can find a basic walkthrough for the creation of a new Git repository", 
            "title": "Git Utils"
        }, 
        {
            "location": "/git/#install-git", 
            "text": "If you don't have git installed you will need also to install brew package manager:  - 'ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"'\n- 'brew install git'", 
            "title": "Install Git"
        }, 
        {
            "location": "/git/#local-global-configuration", 
            "text": "From anyway on your command line:  - 'git config --global user.name  NAME '\n\n- 'git config --global user.email  EMAIL '", 
            "title": "Local Global Configuration"
        }, 
        {
            "location": "/git/#github", 
            "text": "Go to github.com and create an account", 
            "title": "GitHub"
        }, 
        {
            "location": "/git/#new-repository", 
            "text": "To create a new repository:  - log to your account on github\n\n- create a repository\n\n- create a new folder wherever you want into your computer\n\n- navigate to the folder root from your command line\n\n- write the command: 'git init .'\n\n- create a new file with vim command: 'vim .gitignore' // press 'i' and insert the file or folder you want to not track with git\n\n- write the command: 'git remote add origin git@github.com:MyUsername/nameOfTheOnlineRepo.git'\n\n- write the command: 'git add .' // to start tracking the files\n\n- write the command: 'git commit -am \"initial-gitignore\"' // to archive your chagesets\n\n- write the command: 'git push -u origin master' // to push your changesets to the online repository // '-u' to set the branch as default", 
            "title": "New Repository"
        }, 
        {
            "location": "/git/#download-mate-changesets", 
            "text": "Move to your command line window and type:  - 'git pull'", 
            "title": "Download Mate Changesets"
        }, 
        {
            "location": "/git/#check-repository-status", 
            "text": "Move to your command line window and type:  - 'git status'", 
            "title": "Check Repository Status"
        }, 
        {
            "location": "/git/#list-branch", 
            "text": "Move to your command line window and type:  - 'git branch -a'", 
            "title": "List branch"
        }, 
        {
            "location": "/git/#create-and-move-to-a-new-branch", 
            "text": "Move to your command line window and type:  - 'git checkout -b nameOfTheBranch'\n\n- git push  remote-name   branch-name", 
            "title": "Create and move to a new branch"
        }, 
        {
            "location": "/git/#merging", 
            "text": "Move from the developing branch to the one which you want to import changesets:  - 'git merge nameOfTheBranch'", 
            "title": "Merging"
        }, 
        {
            "location": "/git/#delete-file-from-repo", 
            "text": "Move to your command line window and type:  - 'git rm fileName'\n\n- git commit -m \"remove fileName\"", 
            "title": "Delete file from repo"
        }, 
        {
            "location": "/grunt/", 
            "text": "Grunt Utils\n\n\nHere you can find a basic template for the creation of a new Gruntfile\n\n\nInstall Grunt\n\n\nYou will need the Grunt command line (you can install it with the node package manager):\n\n\n- 'npm install -g grunt-cli'\n\n\n\nInstall Tasks\n\n\nFrom anyway on your command line:\n\n\n\"devDependencies\": {\n    \"grunt-concurrent\": \"~0.5.0\",\n    \"grunt-contrib-watch\": \"~0.6.1\",\n    \"grunt-nodemon\": \"~0.3.0\",\n    \"grunt-wiredep\": \"~2.0.0\",\n    \"grunt-concat-css\": \"~0.3.1\",\n    \"grunt-contrib-cssmin\": \"^0.10.0\",\n    \"load-grunt-tasks\": \"^3.2.0\",\n    \"grunt-contrib-concat\": \"^0.5.1\",\n    \"grunt-contrib-jshint\": \"~0.9.2\",\n    \"grunt-contrib-uglify\": \"~0.4.0\",\n    \"imagemin-gifsicle\": \"latest\",\n    \"imagemin-mozjpeg\": \"latest\",\n    \"imagemin-pngquant\": \"latest\"\n}\n\n\n\nGruntfile\n\n\nThis example is based on a MEAN Stack application:\n\n\n// GRUNT INIT\nmodule.exports = function(grunt){\n\n// AUTO LOAD GRUNT TASK\nrequire('load-grunt-tasks')(grunt);\n\n// GRUNT CONFIGURATION\ngrunt.initConfig({\n\n    // GRUNT AUTO LOAD TASK CONFIG\n    pkg: grunt.file.readJSON('package.json'),\n\n    // NODEMON TASK CONFIG\n    nodemon: {\n        dev: {\n            script: 'server.js' // SPECIFIC NODEMON SCRIPT FOR RUNNING YOUR APP\n        }\n    },\n\n    // JS TASKS CONFIG\n\n    // JS SINTAX CHECK\n    jshint: {\n        all: 'public/**/*.js' // CHECK ALL THE JS FILE IN SPECIFIC SOURCE PATH\n    },\n\n    // JS CONCATENATION (USEFUL FOR ANGULAR)\n    concat: {\n        options: {\n            separator: ''\n        },\n        angular: {\n            src:  ['public/*.js', 'public/*/*.js', 'public/*/*/*.js'], // SOURCE PATH\n            dest: 'assets/js/src/angular/angular-main.js' // DESTINATION PATH\n        }\n    },\n\n    // JS MINIFICATION\n    uglify: {\n        build: {\n            files: {\n                'assets/js/dist/main.min.js': 'assets/js/src/**/*.js' // DESTINATION PATH : SOURCE PATH\n            }\n        }\n    },\n\n    // IMAGES TASK CONFIGURATION\n\n    // IMAGES OPTIMIZATION\n    imagemin: {\n        target: {\n            options: {\n                optimizationLevel: 3,\n                progressive: true,\n                use: [pngquant(), mozjpeg(), gifsicle()]\n            },\n            files: [{\n                expand: true,\n                cwd: 'public/src/images/',\n                src: ['**/*.{png,jpg,jpeg,gif}'],\n                dest: 'public/dist/images/'\n            }]\n        }\n    },\n\n    // BOWER TASKS CONFIG\n\n    // BOWER AUTO IMPORT\n    wiredep: {\n        task: {\n            src: ['app/views/master.ejs','app/views/scripts.ejs'], // DESTINATION PATH/S\n        },\n        options: {\n            ignorePath: '../../assets', // LIB PATH ADJUSTMENT\n        }\n    },\n\n    // CSS TASKS CONFIG\n\n    // CSS CONCATENATION\n    concat_css: {\n        all: {\n            src: 'assets/css/src/**/*.css', // SOURCE PATH\n            dest: 'assets/css/dist/style.css' // DESTINATION PATH\n        }\n    },\n\n    // CSS MINIFICATION\n    cssmin: {\n        build: {\n            files: {\n                // DESTINATION PATH : SOURCE PATH\n                'assets/css/dist/style.min.css': 'assets/css/dist/style.css'\n            }\n        }\n    },\n\n    // WATCH TASK CONFIG (USEFUL FOR REALTIME CHANGES - RUN TASKS ON FILE CHANGES)\n    watch: {\n        bower: {\n            files: ['assets/lib/*'], // PATH TO WATCH\n            tasks: ['wiredep'] // TASK TO RUN ON CHANGES\n        },\n        css: {\n            files: ['assets/css/src/**/*.css'],\n            tasks: ['concat_css', 'cssmin']\n        },\n        angular: {\n            files: 'public/**/*.js',\n            tasks: ['concat', 'uglify']\n        },\n    },\n\n    // CONCURRENT TASK CONFIG (USEFUL TO RUN CONCURRENT TASKS)\n    concurrent: {\n        options: {\n            logConcurrentOutput: true\n        },\n        tasks: ['nodemon', 'watch']\n    }\n})\n\n// DEFAULT RUN TASK DECLARATION (DEFAULT IS RUNNING SIMPLY BY LAUNCHING GRUNT)\ngrunt.registerTask('default', ['wiredep', 'imagemin', 'concat_css', 'cssmin', 'concat', 'uglify', 'concurrent']);\n}\n\n\n\nNotes\n\n\nYou can fin a lot of useful task to automate more things like css compilers and more! Check on Google", 
            "title": "Grunt Utils"
        }, 
        {
            "location": "/grunt/#grunt-utils", 
            "text": "Here you can find a basic template for the creation of a new Gruntfile", 
            "title": "Grunt Utils"
        }, 
        {
            "location": "/grunt/#install-grunt", 
            "text": "You will need the Grunt command line (you can install it with the node package manager):  - 'npm install -g grunt-cli'", 
            "title": "Install Grunt"
        }, 
        {
            "location": "/grunt/#install-tasks", 
            "text": "From anyway on your command line:  \"devDependencies\": {\n    \"grunt-concurrent\": \"~0.5.0\",\n    \"grunt-contrib-watch\": \"~0.6.1\",\n    \"grunt-nodemon\": \"~0.3.0\",\n    \"grunt-wiredep\": \"~2.0.0\",\n    \"grunt-concat-css\": \"~0.3.1\",\n    \"grunt-contrib-cssmin\": \"^0.10.0\",\n    \"load-grunt-tasks\": \"^3.2.0\",\n    \"grunt-contrib-concat\": \"^0.5.1\",\n    \"grunt-contrib-jshint\": \"~0.9.2\",\n    \"grunt-contrib-uglify\": \"~0.4.0\",\n    \"imagemin-gifsicle\": \"latest\",\n    \"imagemin-mozjpeg\": \"latest\",\n    \"imagemin-pngquant\": \"latest\"\n}", 
            "title": "Install Tasks"
        }, 
        {
            "location": "/grunt/#gruntfile", 
            "text": "This example is based on a MEAN Stack application:  // GRUNT INIT\nmodule.exports = function(grunt){\n\n// AUTO LOAD GRUNT TASK\nrequire('load-grunt-tasks')(grunt);\n\n// GRUNT CONFIGURATION\ngrunt.initConfig({\n\n    // GRUNT AUTO LOAD TASK CONFIG\n    pkg: grunt.file.readJSON('package.json'),\n\n    // NODEMON TASK CONFIG\n    nodemon: {\n        dev: {\n            script: 'server.js' // SPECIFIC NODEMON SCRIPT FOR RUNNING YOUR APP\n        }\n    },\n\n    // JS TASKS CONFIG\n\n    // JS SINTAX CHECK\n    jshint: {\n        all: 'public/**/*.js' // CHECK ALL THE JS FILE IN SPECIFIC SOURCE PATH\n    },\n\n    // JS CONCATENATION (USEFUL FOR ANGULAR)\n    concat: {\n        options: {\n            separator: ''\n        },\n        angular: {\n            src:  ['public/*.js', 'public/*/*.js', 'public/*/*/*.js'], // SOURCE PATH\n            dest: 'assets/js/src/angular/angular-main.js' // DESTINATION PATH\n        }\n    },\n\n    // JS MINIFICATION\n    uglify: {\n        build: {\n            files: {\n                'assets/js/dist/main.min.js': 'assets/js/src/**/*.js' // DESTINATION PATH : SOURCE PATH\n            }\n        }\n    },\n\n    // IMAGES TASK CONFIGURATION\n\n    // IMAGES OPTIMIZATION\n    imagemin: {\n        target: {\n            options: {\n                optimizationLevel: 3,\n                progressive: true,\n                use: [pngquant(), mozjpeg(), gifsicle()]\n            },\n            files: [{\n                expand: true,\n                cwd: 'public/src/images/',\n                src: ['**/*.{png,jpg,jpeg,gif}'],\n                dest: 'public/dist/images/'\n            }]\n        }\n    },\n\n    // BOWER TASKS CONFIG\n\n    // BOWER AUTO IMPORT\n    wiredep: {\n        task: {\n            src: ['app/views/master.ejs','app/views/scripts.ejs'], // DESTINATION PATH/S\n        },\n        options: {\n            ignorePath: '../../assets', // LIB PATH ADJUSTMENT\n        }\n    },\n\n    // CSS TASKS CONFIG\n\n    // CSS CONCATENATION\n    concat_css: {\n        all: {\n            src: 'assets/css/src/**/*.css', // SOURCE PATH\n            dest: 'assets/css/dist/style.css' // DESTINATION PATH\n        }\n    },\n\n    // CSS MINIFICATION\n    cssmin: {\n        build: {\n            files: {\n                // DESTINATION PATH : SOURCE PATH\n                'assets/css/dist/style.min.css': 'assets/css/dist/style.css'\n            }\n        }\n    },\n\n    // WATCH TASK CONFIG (USEFUL FOR REALTIME CHANGES - RUN TASKS ON FILE CHANGES)\n    watch: {\n        bower: {\n            files: ['assets/lib/*'], // PATH TO WATCH\n            tasks: ['wiredep'] // TASK TO RUN ON CHANGES\n        },\n        css: {\n            files: ['assets/css/src/**/*.css'],\n            tasks: ['concat_css', 'cssmin']\n        },\n        angular: {\n            files: 'public/**/*.js',\n            tasks: ['concat', 'uglify']\n        },\n    },\n\n    // CONCURRENT TASK CONFIG (USEFUL TO RUN CONCURRENT TASKS)\n    concurrent: {\n        options: {\n            logConcurrentOutput: true\n        },\n        tasks: ['nodemon', 'watch']\n    }\n})\n\n// DEFAULT RUN TASK DECLARATION (DEFAULT IS RUNNING SIMPLY BY LAUNCHING GRUNT)\ngrunt.registerTask('default', ['wiredep', 'imagemin', 'concat_css', 'cssmin', 'concat', 'uglify', 'concurrent']);\n}", 
            "title": "Gruntfile"
        }, 
        {
            "location": "/grunt/#notes", 
            "text": "You can fin a lot of useful task to automate more things like css compilers and more! Check on Google", 
            "title": "Notes"
        }, 
        {
            "location": "/mongodb/", 
            "text": "Mongo DB Utils\n\n\nHere you can find a basic MongoDB commands line\n\n\n\n\nIf you don't have git installed you will need also to install brew package manager:\n\n\n- 'ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"'\n- 'brew install mongodb'\n\n\n\nRun\n\n\nIf you don't have git installed you will need also to install brew package manager:\n\n\n- 'mongod'\n\n\n\nCheck if is Running\n\n\nTo check if you have any mongo instance running:\n\n\n- 'ps -ax | grep mongo'\n\n\n\nKill Mongo Instance\n\n\nMove to your command line window and type:\n\n\n- use 'kill PID' code that the previous Check if is Running command provide\n\n\n\nShell\n\n\nMove to your command line window and type:\n\n\n- 'mongo'\n\n\n\nDB List\n\n\nFrom the mongo opened shell:\n\n\n- 'show dbs'\n\n\n\nUse/Create DB\n\n\nFrom the mongo opened shell:\n\n\n- 'use nameOfYourDB' (if the DB doesn't exist mongo will move you to a new one, but it will not be totally created until you make an insert)\n\n\n\nCollections List\n\n\nFrom the mongo opened shell:\n\n\n- 'show collections'\n\n\n\nCreate a new Document / Collection ('tables')\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.insert({\"key1\":\"value1\", \"key2\": \"value2\"})'\n\n\n\nQuery all Document Entries\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.find().pretty()'\n\n\n\nFiltered Query\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.find({ \"key1\": \"value1\"})'\n\n\n\nUpdate Document\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.update({\"key1\": \"value1\"}, { $set: {\"key2\": \"value2\"}})'\n\n\n\nDeleting a Document\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.drop()'\n\n\n\nDeleting Multiple Documents Entries\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.remove({ \"key1\": \"value1\" })'\n\n\n\nDeleting DB\n\n\nFrom the mongo opened shell and make sure you are using the DB that you want to delete typing 'use nameOfYourDB':\n\n\n- 'db.dropDatabase()'\n\n\n\nDeleting single entry\n\n\nYou can delete single entries just specifying '_id' value\n\n\n- 'db.collection.remove( {\"_id\": ObjectId(\"xxxx\")} )'", 
            "title": "Mongo DB Utils"
        }, 
        {
            "location": "/mongodb/#mongo-db-utils", 
            "text": "Here you can find a basic MongoDB commands line", 
            "title": "Mongo DB Utils"
        }, 
        {
            "location": "/mongodb/#run", 
            "text": "If you don't have git installed you will need also to install brew package manager:  - 'mongod'", 
            "title": "Run"
        }, 
        {
            "location": "/mongodb/#check-if-is-running", 
            "text": "To check if you have any mongo instance running:  - 'ps -ax | grep mongo'", 
            "title": "Check if is Running"
        }, 
        {
            "location": "/mongodb/#kill-mongo-instance", 
            "text": "Move to your command line window and type:  - use 'kill PID' code that the previous Check if is Running command provide", 
            "title": "Kill Mongo Instance"
        }, 
        {
            "location": "/mongodb/#shell", 
            "text": "Move to your command line window and type:  - 'mongo'", 
            "title": "Shell"
        }, 
        {
            "location": "/mongodb/#db-list", 
            "text": "From the mongo opened shell:  - 'show dbs'", 
            "title": "DB List"
        }, 
        {
            "location": "/mongodb/#usecreate-db", 
            "text": "From the mongo opened shell:  - 'use nameOfYourDB' (if the DB doesn't exist mongo will move you to a new one, but it will not be totally created until you make an insert)", 
            "title": "Use/Create DB"
        }, 
        {
            "location": "/mongodb/#collections-list", 
            "text": "From the mongo opened shell:  - 'show collections'", 
            "title": "Collections List"
        }, 
        {
            "location": "/mongodb/#create-a-new-document-collection-tables", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.insert({\"key1\":\"value1\", \"key2\": \"value2\"})'", 
            "title": "Create a new Document / Collection ('tables')"
        }, 
        {
            "location": "/mongodb/#query-all-document-entries", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.find().pretty()'", 
            "title": "Query all Document Entries"
        }, 
        {
            "location": "/mongodb/#filtered-query", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.find({ \"key1\": \"value1\"})'", 
            "title": "Filtered Query"
        }, 
        {
            "location": "/mongodb/#update-document", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.update({\"key1\": \"value1\"}, { $set: {\"key2\": \"value2\"}})'", 
            "title": "Update Document"
        }, 
        {
            "location": "/mongodb/#deleting-a-document", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.drop()'", 
            "title": "Deleting a Document"
        }, 
        {
            "location": "/mongodb/#deleting-multiple-documents-entries", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.remove({ \"key1\": \"value1\" })'", 
            "title": "Deleting Multiple Documents Entries"
        }, 
        {
            "location": "/mongodb/#deleting-db", 
            "text": "From the mongo opened shell and make sure you are using the DB that you want to delete typing 'use nameOfYourDB':  - 'db.dropDatabase()'", 
            "title": "Deleting DB"
        }, 
        {
            "location": "/mongodb/#deleting-single-entry", 
            "text": "You can delete single entries just specifying '_id' value  - 'db.collection.remove( {\"_id\": ObjectId(\"xxxx\")} )'", 
            "title": "Deleting single entry"
        }, 
        {
            "location": "/python/", 
            "text": "Python Utils\n\n\nHere you can find a list of Python tips\n\n\nInstall Developer Tools\n\n\nUseful tools for python develop environment\n\n\n- 'brew install python'\n\n\n\nIt will install for you Setuptools \n Pip\n\n\n- 'pip install virtualenv'\n\n\n\nCreate and Use Virtual Environments\n\n\n- 'cd my_project_folder'\n\n- 'virtualenv venv'\n\n\n\nActivate Virtual Environments\n\n\n- 'source venv/bin/activate'\n\n\n\nCheck Virtual Environments Installed Packages\n\n\n- 'pip freeze'\n\n\n\nRun Simple Server\n\n\nMove to your command line window and navigate to your project root:\n\n\n- 'python -m SimpleHTTPServer 8000'", 
            "title": "Python Utils"
        }, 
        {
            "location": "/python/#python-utils", 
            "text": "Here you can find a list of Python tips", 
            "title": "Python Utils"
        }, 
        {
            "location": "/python/#install-developer-tools", 
            "text": "Useful tools for python develop environment  - 'brew install python'  It will install for you Setuptools   Pip  - 'pip install virtualenv'", 
            "title": "Install Developer Tools"
        }, 
        {
            "location": "/python/#create-and-use-virtual-environments", 
            "text": "- 'cd my_project_folder'\n\n- 'virtualenv venv'", 
            "title": "Create and Use Virtual Environments"
        }, 
        {
            "location": "/python/#activate-virtual-environments", 
            "text": "- 'source venv/bin/activate'", 
            "title": "Activate Virtual Environments"
        }, 
        {
            "location": "/python/#check-virtual-environments-installed-packages", 
            "text": "- 'pip freeze'", 
            "title": "Check Virtual Environments Installed Packages"
        }, 
        {
            "location": "/python/#run-simple-server", 
            "text": "Move to your command line window and navigate to your project root:  - 'python -m SimpleHTTPServer 8000'", 
            "title": "Run Simple Server"
        }, 
        {
            "location": "/laravel/", 
            "text": "Laravel Utils\n\n\nComposer\n\n\nPhp dependencies manager.\nInstall with\n\n\n- curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n\n\n\nAdd something to your composer json\n\n\n- composer require phpspec/phpspec (vendor/pck)\n\n\n\nMore packages at\n\n\n- https://packagist.org/\n\n\n\nCreate a new virgin laravel project with\n\n\n- composer create-project laravel/laravel NAME\n\n\n\nHomestead\n\n\nLaravel ready environment.\nYou will need installed\n\n\n- virtualbox\n- vagrant\n\n\n\nAdd the homestead vagrant box with\n\n\n- vagrant box add laravel/homestead\n\n\n\nInstall homestead with composer\n\n\n- composer global require \"laravel/homestead=~2.0\"\n\n\n\nBe sure to add the PATH to your bash or zsh profile in order to use homestead\n\n\n- export PATH:~/.composer/vendor/bin:$PATH\n\n\n\nTry to run homestead and you will see all the commands available\n\n\n- homestead\n\n\n\nCheck .homestead folder ~ or the configuration with\n\n\n- homestead edit\n\n\n\n[PROBLEMS] - 500 server error, nginx has permission problems\n\n\nLaracasts is using homestead like this\n\n\n- serve domain path\n\n\n\nbut its searching for a file called serve.sh and I have serve-laravel and I can't cp it\n\n\nStructure\n\n\napp HTTP --\n routes.php --\n route file\n\n\n- Route::get('about', 'PagesController@about');\n\n\n\nThis will search a PagesController with a method \"about\"\n\n\nEnvironment\n\n\nEverything is inside .env file\n\n\nCreating new controller\n\n\nYou can do this with laravel cli called Artisan\n\n\n- php artisan make:controller PagesController --plain (--plain doesn't exist anymore)\n\n\n\nfor help\n\n\n- php artisan help make:controller\n\n\n\nPassing data to view\n\n\nFirst way\n\n\n- return view('pages.about')-\nwith('name', $name);\n- return view('pages.about')-\nwith([\n        'firstName' =\n 'Andrea',\n        'lastName' =\n 'Speziale'\n    ]);\n- return view('pages.about', $data);\n- return view('pages.about', compact('firstName', 'lastName'));\n\n\n\nin the html\n\n\n- {!! $name !!} with escaping\n- {{ $name }}\n\n\n\nMaster and sections\n\n\nCreate an app.blade.php file which will contain the basic html, in master:\n    \nhtml\n        \nbody\n\n            \ndiv class=\"container\"\n\n                @yield('content')\n            \n/div\n\n            @yield('footer') \n!-- You will be able to add this only in specific files --\n\n        \n/body\n\n\nIn a random contact page:\n    -   \nhtml\n        @extends('app')\n        @section('content')\n            \nh1\nContact Me!\n/h1\n\n            \np\nLorem ipsum\n/p\n\n        @stop\n        @section('footer')\n            \nscript\nsome script\n/script\n \n!-- You will be able to avoid it in other pages --\n\n        @stop\n\n\nFast IF statement in blade\n\n\nInstead of opening php tags\n\n\n-   ```html\n    @if($firstName == \"Andrea\")\n        \nh1\nAbout me: {{ $firstName }} {{ $lastName }}\n/h1\n\n        \np\nLorem ipsum\n/p\n\n    @else\n        \np\nError\n/p\n\n    @endif\n    ```\n\n\n\nWe have also\n\n\n- @unless()\n-   The controller returning something like: $people = ['Alex', 'Gabri', 'Andre'];\n    ```html\n    @if(count($people))\n        \nh3\nPeople I like:\n/h3\n\n        \nul\n\n            @foreach($people as $person)\n                \nli\n{{ $person }}\n/li\n\n            @endforeach\n        \n/ul\n\n    @endif\n    ```\n\n\n\nMore about configuration\n\n\n- config folder--\ndatabase.php\n\n\n\nFor example u will find mysql ready to get the configuration from the .env file.\nThis file is also ignored by the .gitignore file, so you can have separate config for local and production environment\n\n\n- 'host' =\n env('DB_HOST', 'localhost')\n\n\n\nThis will be searching for a DB_HOST variable in the env file and if it will be not found, will take the localhost as default\n\n\n- Default connection to mysql from database.php 'default' =\n env('DB_CONNECTION', 'mysql')\n\n\n\nMigration\n\n\nVersion control for DBs.\nTables as php classes.\n\n\nCreate the class and then create the table.\n\n\n[I had to install manually sqlite - sudo apt-get install php5-sqlite]\n\n\n- php artisan migrate\n- php artisan migrate:reset [roolback all migration]\n- php artisan migrate:rollback [roolback last migration]\n\n\n\nExample --\n create a table for Articles\n\n\n-  php artisan make:migration create_articles_table --create=\"articles\"\n\n\n\nIf for example you want to add a new column for Articles\n\n\n- php artisan make:migration add_excerpt_to_articles_table --table=\"articles\"\n\n\n\nIt will create a new file which \"extends\" articles and you will write in the up function the new column\n\n\n- $table-\ntext(\"excerpt\")-\nnullable(); //if you agree that your article excerpt could be empty\n\n\n\nand you will write in the down function\n\n\n- $table-\ndropColumn(\"excerpt\");\n\n\n\ntry to migrate it and rollback it too!\n\n\n- php artisan migrate\n- php artisan:rollback --\n ERROR --\n you will need composer require doctrine/dbal\n\n\n\nEloquent [ORM]\n\n\nRecord implementation\n\n\n- php artisan create:model Article\n\n\n\nUseful laravel cli for testing\n    - php artisan tinker\n        - $article = new App\\Article\n        - $article-\ntitle='my first article'\n        - $article-\nbody='lorem ipsum'\n        - $article-\npublished_at=Carbon\\Carbon::now();\n        - $article or $article-\ntoArray();\n\n\nNow make it persistent\n\n\n    - $article-\nsave();\n\n\n\nFetching it\n\n\n    - App\\Article::all()-\ntoArray();\n\n\n\nUpdating\n\n\n    - $article-\ntitle = 'My Updated First Article';\n    - $article-\nsave();\n    - App\\Article::all()-\ntoArray();\n\n\n\nHow we could do it: select * from table where id = 1;\n\n\n    - $article = App\\Article::find(1);\n    - $article or $article-\ntoArray();\n\n\n\nHow we could do it: select * from articles where body = 'lorem ipsum';\n\n\n    - $article = App\\Article::where('body', 'lorem ipsum')-\nget();\n    - $article = App\\Article::where('body', 'lorem ipsum')-\nfirst(); to get the very first\n\n\n\nFill the object in one time\n\n\n    - $article = App\\Article::create(['title'=\n'Very new article', 'body'=\n'New body', 'published_at'=\nCarbon\\Carbon::now()]);\n\nyou will get a MassAssignmentException, so you will go to Article.php model and update it with\n\n    -   protected $fillable=[\n            'title',\n            'body',\n            'published_at'\n        ];\n\nexit from the tinker, re-open it and retry\n\n    - $article = App\\Article::create(['title'=\n'Very new article', 'body'=\n'New body', 'published_at'=\nCarbon\\Carbon::now()]);\n\n\n\nA fast way to update\n\n\n    - $article = App\\Article::find(2);\n    - $article-\nupdate(['body' =\n 'Updated!!']); //filling and saving it", 
            "title": "Laravel Utils"
        }, 
        {
            "location": "/laravel/#laravel-utils", 
            "text": "", 
            "title": "Laravel Utils"
        }, 
        {
            "location": "/laravel/#composer", 
            "text": "Php dependencies manager.\nInstall with  - curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer  Add something to your composer json  - composer require phpspec/phpspec (vendor/pck)  More packages at  - https://packagist.org/  Create a new virgin laravel project with  - composer create-project laravel/laravel NAME", 
            "title": "Composer"
        }, 
        {
            "location": "/laravel/#homestead", 
            "text": "Laravel ready environment.\nYou will need installed  - virtualbox\n- vagrant  Add the homestead vagrant box with  - vagrant box add laravel/homestead  Install homestead with composer  - composer global require \"laravel/homestead=~2.0\"  Be sure to add the PATH to your bash or zsh profile in order to use homestead  - export PATH:~/.composer/vendor/bin:$PATH  Try to run homestead and you will see all the commands available  - homestead  Check .homestead folder ~ or the configuration with  - homestead edit  [PROBLEMS] - 500 server error, nginx has permission problems  Laracasts is using homestead like this  - serve domain path  but its searching for a file called serve.sh and I have serve-laravel and I can't cp it", 
            "title": "Homestead"
        }, 
        {
            "location": "/laravel/#structure", 
            "text": "app HTTP --  routes.php --  route file  - Route::get('about', 'PagesController@about');  This will search a PagesController with a method \"about\"", 
            "title": "Structure"
        }, 
        {
            "location": "/laravel/#environment", 
            "text": "Everything is inside .env file", 
            "title": "Environment"
        }, 
        {
            "location": "/laravel/#creating-new-controller", 
            "text": "You can do this with laravel cli called Artisan  - php artisan make:controller PagesController --plain (--plain doesn't exist anymore)  for help  - php artisan help make:controller", 
            "title": "Creating new controller"
        }, 
        {
            "location": "/laravel/#passing-data-to-view", 
            "text": "First way  - return view('pages.about')- with('name', $name);\n- return view('pages.about')- with([\n        'firstName' =  'Andrea',\n        'lastName' =  'Speziale'\n    ]);\n- return view('pages.about', $data);\n- return view('pages.about', compact('firstName', 'lastName'));  in the html  - {!! $name !!} with escaping\n- {{ $name }}", 
            "title": "Passing data to view"
        }, 
        {
            "location": "/laravel/#master-and-sections", 
            "text": "Create an app.blade.php file which will contain the basic html, in master:\n     html\n         body \n             div class=\"container\" \n                @yield('content')\n             /div \n            @yield('footer')  !-- You will be able to add this only in specific files -- \n         /body  In a random contact page:\n    -    html\n        @extends('app')\n        @section('content')\n             h1 Contact Me! /h1 \n             p Lorem ipsum /p \n        @stop\n        @section('footer')\n             script some script /script   !-- You will be able to avoid it in other pages -- \n        @stop", 
            "title": "Master and sections"
        }, 
        {
            "location": "/laravel/#fast-if-statement-in-blade", 
            "text": "Instead of opening php tags  -   ```html\n    @if($firstName == \"Andrea\")\n         h1 About me: {{ $firstName }} {{ $lastName }} /h1 \n         p Lorem ipsum /p \n    @else\n         p Error /p \n    @endif\n    ```  We have also  - @unless()\n-   The controller returning something like: $people = ['Alex', 'Gabri', 'Andre'];\n    ```html\n    @if(count($people))\n         h3 People I like: /h3 \n         ul \n            @foreach($people as $person)\n                 li {{ $person }} /li \n            @endforeach\n         /ul \n    @endif\n    ```", 
            "title": "Fast IF statement in blade"
        }, 
        {
            "location": "/laravel/#more-about-configuration", 
            "text": "- config folder-- database.php  For example u will find mysql ready to get the configuration from the .env file.\nThis file is also ignored by the .gitignore file, so you can have separate config for local and production environment  - 'host' =  env('DB_HOST', 'localhost')  This will be searching for a DB_HOST variable in the env file and if it will be not found, will take the localhost as default  - Default connection to mysql from database.php 'default' =  env('DB_CONNECTION', 'mysql')", 
            "title": "More about configuration"
        }, 
        {
            "location": "/laravel/#migration", 
            "text": "Version control for DBs.\nTables as php classes.  Create the class and then create the table.  [I had to install manually sqlite - sudo apt-get install php5-sqlite]  - php artisan migrate\n- php artisan migrate:reset [roolback all migration]\n- php artisan migrate:rollback [roolback last migration]  Example --  create a table for Articles  -  php artisan make:migration create_articles_table --create=\"articles\"  If for example you want to add a new column for Articles  - php artisan make:migration add_excerpt_to_articles_table --table=\"articles\"  It will create a new file which \"extends\" articles and you will write in the up function the new column  - $table- text(\"excerpt\")- nullable(); //if you agree that your article excerpt could be empty  and you will write in the down function  - $table- dropColumn(\"excerpt\");  try to migrate it and rollback it too!  - php artisan migrate\n- php artisan:rollback --  ERROR --  you will need composer require doctrine/dbal", 
            "title": "Migration"
        }, 
        {
            "location": "/laravel/#eloquent-orm", 
            "text": "Record implementation  - php artisan create:model Article  Useful laravel cli for testing\n    - php artisan tinker\n        - $article = new App\\Article\n        - $article- title='my first article'\n        - $article- body='lorem ipsum'\n        - $article- published_at=Carbon\\Carbon::now();\n        - $article or $article- toArray();  Now make it persistent      - $article- save();  Fetching it      - App\\Article::all()- toArray();  Updating      - $article- title = 'My Updated First Article';\n    - $article- save();\n    - App\\Article::all()- toArray();  How we could do it: select * from table where id = 1;      - $article = App\\Article::find(1);\n    - $article or $article- toArray();  How we could do it: select * from articles where body = 'lorem ipsum';      - $article = App\\Article::where('body', 'lorem ipsum')- get();\n    - $article = App\\Article::where('body', 'lorem ipsum')- first(); to get the very first  Fill the object in one time      - $article = App\\Article::create(['title'= 'Very new article', 'body'= 'New body', 'published_at'= Carbon\\Carbon::now()]);\n\nyou will get a MassAssignmentException, so you will go to Article.php model and update it with\n\n    -   protected $fillable=[\n            'title',\n            'body',\n            'published_at'\n        ];\n\nexit from the tinker, re-open it and retry\n\n    - $article = App\\Article::create(['title'= 'Very new article', 'body'= 'New body', 'published_at'= Carbon\\Carbon::now()]);  A fast way to update      - $article = App\\Article::find(2);\n    - $article- update(['body' =  'Updated!!']); //filling and saving it", 
            "title": "Eloquent [ORM]"
        }
    ]
}