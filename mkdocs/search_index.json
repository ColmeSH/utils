{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Utils Documentation\n\n\nHey thank you for enjoying to my personal documentation.\nYou will find useful tips for Git, MongoDB and more...    \n\n\nRequirements\n\n\nMAC OSX or a linux based OS, \nPython\n and \nMKDOCS\n\n\nContributing\n\n\nThis documentation it's very easy to use and customize.\n\n\nYou can clone it and use it for yourself by simply changing the remote path of the repo,\nmaking your changes, pushing it to master and then running the update script.\n\n\nOr you can just fork the repo and add your contribution with other useful tips!\n\n\nGh-Pages\n\n\nDo the magic!\n\n\nIt's an amazing service provided by GitHub that allow users\nto explore and display their projects directly from GitHub website by simply\ncreating a gh-pages branch and pushing the code on it.\n\n\nUsers will be able to explore the project from a link like\nyourGitHubUsername.github.io/repositoryName.\n\nLearn more.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#welcome-to-utils-documentation", 
            "text": "Hey thank you for enjoying to my personal documentation.\nYou will find useful tips for Git, MongoDB and more...", 
            "title": "Welcome to Utils Documentation"
        }, 
        {
            "location": "/#requirements", 
            "text": "MAC OSX or a linux based OS,  Python  and  MKDOCS", 
            "title": "Requirements"
        }, 
        {
            "location": "/#contributing", 
            "text": "This documentation it's very easy to use and customize.  You can clone it and use it for yourself by simply changing the remote path of the repo,\nmaking your changes, pushing it to master and then running the update script.  Or you can just fork the repo and add your contribution with other useful tips!", 
            "title": "Contributing"
        }, 
        {
            "location": "/#gh-pages", 
            "text": "Do the magic!  It's an amazing service provided by GitHub that allow users\nto explore and display their projects directly from GitHub website by simply\ncreating a gh-pages branch and pushing the code on it.  Users will be able to explore the project from a link like\nyourGitHubUsername.github.io/repositoryName. Learn more.", 
            "title": "Gh-Pages"
        }, 
        {
            "location": "/git/", 
            "text": "Git Utils\n\n\nHere you can find a basic walkthrough for the creation of a new Git repository\n\n\nInstall Git\n\n\nIf you don't have git installed you will need also to install brew package manager:\n\n\n- 'ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"'\n- 'brew install git'\n\n\n\nLocal Global Configuration\n\n\nFrom anyway on your command line:\n\n\n- 'git config --global user.name \nNAME\n'\n\n- 'git config --global user.email \nEMAIL\n'\n\n\n\nGitHub\n\n\nGo to github.com and create an account\n\n\nNew Repository\n\n\nTo create a new repository:\n\n\n- log to your account on github\n\n- create a repository\n\n- create a new folder wherever you want into your computer\n\n- navigate to the folder root from your command line\n\n- write the command: 'git init .'\n\n- create a new file with vim command: 'vim .gitignore' // press 'i' and insert the file or folder you want to not track with git\n\n- write the command: 'git remote add origin git@github.com:MyUsername/nameOfTheOnlineRepo.git'\n\n- write the command: 'git add .' // to start tracking the files\n\n- write the command: 'git commit -am \"initial-gitignore\"' // to archive your chagesets\n\n- write the command: 'git push -u origin master' // to push your changesets to the online repository // '-u' to set the branch as default\n\n\n\nDownload Mate Changesets\n\n\nMove to your command line window and type:\n\n\n- 'git pull'\n\n\n\nCheck Repository Status\n\n\nMove to your command line window and type:\n\n\n- 'git status'\n\n\n\nDiscard Changes\n\n\nOn single file\n\n\n- git checkout -- \nFILE_NAME\n\n\n\n\nAll changes\n\n\n- git checkout .\n\n\n\nReset to Old Commit\n\n\n- git revert \nCOMMIT\n\n\n\n\nCreate and move to a new branch\n\n\nMove to your command line window and type:\n\n\n- 'git checkout -b nameOfTheBranch'\n\n- git push \nremote-name\n \nbranch-name\n\n\n\n\nList branch\n\n\nMove to your command line window and type:\n\n\n- 'git branch -a'\n\n\n\nIf have cloned a new repository with different branches to move to one of those you will need \nto create a local branch that will track the remote one\n\n\n- git checkout -b local_branch_name origin/branch_name\n\n\n\nMerging\n\n\nMove from the developing branch to the one which you want to import changesets:\n\n\n- 'git merge nameOfTheBranch'\n\n\n\nDelete file from repo\n\n\nMove to your command line window and type:\n\n\n- git rm file1.txt\n- git commit -m \"remove file1.txt\"\n\n\n\nBut if you want to remove the file only from the Git repository and not remove it from the filesystem, use:\n\n\n- git rm --cached file1.txt\n\n\n\nTag and Release\n\n\nSome explanation from the Github Docs\n\nGithub\n\n\nTagging\n    - git tag (listing)\n    - git tag -a v1.4 -m \"my version 1.4\"\n    - git push --tags\n    - git show v1.4 (showing)\n\n\nTips\n\n\nCommits by author\n\n\n- git log --author=USERNAME\n\n\n\nCcompressed log where each commit is one line:\n\n\n- git log --pretty=oneline\n\n\n\nASCII art tree of all the branches, decorated with the names of tags and branches:\n\n\n- git log --graph --oneline --decorate --all\n\n\n\nGit log with file changed\n\n\n- git log --name-status\n\n\n\nChange permanently log format\n\n\n- git config format.pretty oneline\n- git config format.pretty medium\n- git config format.pretty full", 
            "title": "Git Utils"
        }, 
        {
            "location": "/git/#git-utils", 
            "text": "Here you can find a basic walkthrough for the creation of a new Git repository", 
            "title": "Git Utils"
        }, 
        {
            "location": "/git/#install-git", 
            "text": "If you don't have git installed you will need also to install brew package manager:  - 'ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"'\n- 'brew install git'", 
            "title": "Install Git"
        }, 
        {
            "location": "/git/#local-global-configuration", 
            "text": "From anyway on your command line:  - 'git config --global user.name  NAME '\n\n- 'git config --global user.email  EMAIL '", 
            "title": "Local Global Configuration"
        }, 
        {
            "location": "/git/#github", 
            "text": "Go to github.com and create an account", 
            "title": "GitHub"
        }, 
        {
            "location": "/git/#new-repository", 
            "text": "To create a new repository:  - log to your account on github\n\n- create a repository\n\n- create a new folder wherever you want into your computer\n\n- navigate to the folder root from your command line\n\n- write the command: 'git init .'\n\n- create a new file with vim command: 'vim .gitignore' // press 'i' and insert the file or folder you want to not track with git\n\n- write the command: 'git remote add origin git@github.com:MyUsername/nameOfTheOnlineRepo.git'\n\n- write the command: 'git add .' // to start tracking the files\n\n- write the command: 'git commit -am \"initial-gitignore\"' // to archive your chagesets\n\n- write the command: 'git push -u origin master' // to push your changesets to the online repository // '-u' to set the branch as default", 
            "title": "New Repository"
        }, 
        {
            "location": "/git/#download-mate-changesets", 
            "text": "Move to your command line window and type:  - 'git pull'", 
            "title": "Download Mate Changesets"
        }, 
        {
            "location": "/git/#check-repository-status", 
            "text": "Move to your command line window and type:  - 'git status'", 
            "title": "Check Repository Status"
        }, 
        {
            "location": "/git/#discard-changes", 
            "text": "On single file  - git checkout --  FILE_NAME   All changes  - git checkout .  Reset to Old Commit  - git revert  COMMIT", 
            "title": "Discard Changes"
        }, 
        {
            "location": "/git/#create-and-move-to-a-new-branch", 
            "text": "Move to your command line window and type:  - 'git checkout -b nameOfTheBranch'\n\n- git push  remote-name   branch-name", 
            "title": "Create and move to a new branch"
        }, 
        {
            "location": "/git/#list-branch", 
            "text": "Move to your command line window and type:  - 'git branch -a'  If have cloned a new repository with different branches to move to one of those you will need \nto create a local branch that will track the remote one  - git checkout -b local_branch_name origin/branch_name", 
            "title": "List branch"
        }, 
        {
            "location": "/git/#merging", 
            "text": "Move from the developing branch to the one which you want to import changesets:  - 'git merge nameOfTheBranch'", 
            "title": "Merging"
        }, 
        {
            "location": "/git/#delete-file-from-repo", 
            "text": "Move to your command line window and type:  - git rm file1.txt\n- git commit -m \"remove file1.txt\"  But if you want to remove the file only from the Git repository and not remove it from the filesystem, use:  - git rm --cached file1.txt", 
            "title": "Delete file from repo"
        }, 
        {
            "location": "/git/#tag-and-release", 
            "text": "Some explanation from the Github Docs Github  Tagging\n    - git tag (listing)\n    - git tag -a v1.4 -m \"my version 1.4\"\n    - git push --tags\n    - git show v1.4 (showing)", 
            "title": "Tag and Release"
        }, 
        {
            "location": "/git/#tips", 
            "text": "Commits by author  - git log --author=USERNAME  Ccompressed log where each commit is one line:  - git log --pretty=oneline  ASCII art tree of all the branches, decorated with the names of tags and branches:  - git log --graph --oneline --decorate --all  Git log with file changed  - git log --name-status  Change permanently log format  - git config format.pretty oneline\n- git config format.pretty medium\n- git config format.pretty full", 
            "title": "Tips"
        }, 
        {
            "location": "/grunt/", 
            "text": "Grunt Utils\n\n\nHere you can find a basic template for the creation of a new Gruntfile\n\n\nInstall Grunt\n\n\nYou will need the Grunt command line (you can install it with the node package manager):\n\n\n- 'npm install -g grunt-cli'\n\n\n\nInstall Tasks\n\n\nFrom anyway on your command line:\n\n\n\"devDependencies\": {\n    \"grunt-concurrent\": \"~0.5.0\",\n    \"grunt-contrib-watch\": \"~0.6.1\",\n    \"grunt-nodemon\": \"~0.3.0\",\n    \"grunt-wiredep\": \"~2.0.0\",\n    \"grunt-concat-css\": \"~0.3.1\",\n    \"grunt-contrib-cssmin\": \"^0.10.0\",\n    \"load-grunt-tasks\": \"^3.2.0\",\n    \"grunt-contrib-concat\": \"^0.5.1\",\n    \"grunt-contrib-jshint\": \"~0.9.2\",\n    \"grunt-contrib-uglify\": \"~0.4.0\",\n    \"imagemin-gifsicle\": \"latest\",\n    \"imagemin-mozjpeg\": \"latest\",\n    \"imagemin-pngquant\": \"latest\"\n}\n\n\n\nGruntfile\n\n\nThis example is based on a MEAN Stack application:\n\n\n// GRUNT INIT\nmodule.exports = function(grunt){\n\n// AUTO LOAD GRUNT TASK\nrequire('load-grunt-tasks')(grunt);\n\n// GRUNT CONFIGURATION\ngrunt.initConfig({\n\n    // GRUNT AUTO LOAD TASK CONFIG\n    pkg: grunt.file.readJSON('package.json'),\n\n    // NODEMON TASK CONFIG\n    nodemon: {\n        dev: {\n            script: 'server.js' // SPECIFIC NODEMON SCRIPT FOR RUNNING YOUR APP\n        }\n    },\n\n    // JS TASKS CONFIG\n\n    // JS SINTAX CHECK\n    jshint: {\n        all: 'public/**/*.js' // CHECK ALL THE JS FILE IN SPECIFIC SOURCE PATH\n    },\n\n    // JS CONCATENATION (USEFUL FOR ANGULAR)\n    concat: {\n        options: {\n            separator: ''\n        },\n        angular: {\n            src:  ['public/*.js', 'public/*/*.js', 'public/*/*/*.js'], // SOURCE PATH\n            dest: 'assets/js/src/angular/angular-main.js' // DESTINATION PATH\n        }\n    },\n\n    // JS MINIFICATION\n    uglify: {\n        build: {\n            files: {\n                'assets/js/dist/main.min.js': 'assets/js/src/**/*.js' // DESTINATION PATH : SOURCE PATH\n            }\n        }\n    },\n\n    // IMAGES TASK CONFIGURATION\n\n    // IMAGES OPTIMIZATION\n    imagemin: {\n        target: {\n            options: {\n                optimizationLevel: 3,\n                progressive: true,\n                use: [pngquant(), mozjpeg(), gifsicle()]\n            },\n            files: [{\n                expand: true,\n                cwd: 'public/src/images/',\n                src: ['**/*.{png,jpg,jpeg,gif}'],\n                dest: 'public/dist/images/'\n            }]\n        }\n    },\n\n    // BOWER TASKS CONFIG\n\n    // BOWER AUTO IMPORT\n    wiredep: {\n        task: {\n            src: ['app/views/master.ejs','app/views/scripts.ejs'], // DESTINATION PATH/S\n        },\n        options: {\n            ignorePath: '../../assets', // LIB PATH ADJUSTMENT\n        }\n    },\n\n    // CSS TASKS CONFIG\n\n    // CSS CONCATENATION\n    concat_css: {\n        all: {\n            src: 'assets/css/src/**/*.css', // SOURCE PATH\n            dest: 'assets/css/dist/style.css' // DESTINATION PATH\n        }\n    },\n\n    // CSS MINIFICATION\n    cssmin: {\n        build: {\n            files: {\n                // DESTINATION PATH : SOURCE PATH\n                'assets/css/dist/style.min.css': 'assets/css/dist/style.css'\n            }\n        }\n    },\n\n    // WATCH TASK CONFIG (USEFUL FOR REALTIME CHANGES - RUN TASKS ON FILE CHANGES)\n    watch: {\n        bower: {\n            files: ['assets/lib/*'], // PATH TO WATCH\n            tasks: ['wiredep'] // TASK TO RUN ON CHANGES\n        },\n        css: {\n            files: ['assets/css/src/**/*.css'],\n            tasks: ['concat_css', 'cssmin']\n        },\n        angular: {\n            files: 'public/**/*.js',\n            tasks: ['concat', 'uglify']\n        },\n    },\n\n    // CONCURRENT TASK CONFIG (USEFUL TO RUN CONCURRENT TASKS)\n    concurrent: {\n        options: {\n            logConcurrentOutput: true\n        },\n        tasks: ['nodemon', 'watch']\n    }\n})\n\n// DEFAULT RUN TASK DECLARATION (DEFAULT IS RUNNING SIMPLY BY LAUNCHING GRUNT)\ngrunt.registerTask('default', ['wiredep', 'imagemin', 'concat_css', 'cssmin', 'concat', 'uglify', 'concurrent']);\n}\n\n\n\nNotes\n\n\nYou can fin a lot of useful task to automate more things like css compilers and more! Check on Google", 
            "title": "Grunt Utils"
        }, 
        {
            "location": "/grunt/#grunt-utils", 
            "text": "Here you can find a basic template for the creation of a new Gruntfile", 
            "title": "Grunt Utils"
        }, 
        {
            "location": "/grunt/#install-grunt", 
            "text": "You will need the Grunt command line (you can install it with the node package manager):  - 'npm install -g grunt-cli'", 
            "title": "Install Grunt"
        }, 
        {
            "location": "/grunt/#install-tasks", 
            "text": "From anyway on your command line:  \"devDependencies\": {\n    \"grunt-concurrent\": \"~0.5.0\",\n    \"grunt-contrib-watch\": \"~0.6.1\",\n    \"grunt-nodemon\": \"~0.3.0\",\n    \"grunt-wiredep\": \"~2.0.0\",\n    \"grunt-concat-css\": \"~0.3.1\",\n    \"grunt-contrib-cssmin\": \"^0.10.0\",\n    \"load-grunt-tasks\": \"^3.2.0\",\n    \"grunt-contrib-concat\": \"^0.5.1\",\n    \"grunt-contrib-jshint\": \"~0.9.2\",\n    \"grunt-contrib-uglify\": \"~0.4.0\",\n    \"imagemin-gifsicle\": \"latest\",\n    \"imagemin-mozjpeg\": \"latest\",\n    \"imagemin-pngquant\": \"latest\"\n}", 
            "title": "Install Tasks"
        }, 
        {
            "location": "/grunt/#gruntfile", 
            "text": "This example is based on a MEAN Stack application:  // GRUNT INIT\nmodule.exports = function(grunt){\n\n// AUTO LOAD GRUNT TASK\nrequire('load-grunt-tasks')(grunt);\n\n// GRUNT CONFIGURATION\ngrunt.initConfig({\n\n    // GRUNT AUTO LOAD TASK CONFIG\n    pkg: grunt.file.readJSON('package.json'),\n\n    // NODEMON TASK CONFIG\n    nodemon: {\n        dev: {\n            script: 'server.js' // SPECIFIC NODEMON SCRIPT FOR RUNNING YOUR APP\n        }\n    },\n\n    // JS TASKS CONFIG\n\n    // JS SINTAX CHECK\n    jshint: {\n        all: 'public/**/*.js' // CHECK ALL THE JS FILE IN SPECIFIC SOURCE PATH\n    },\n\n    // JS CONCATENATION (USEFUL FOR ANGULAR)\n    concat: {\n        options: {\n            separator: ''\n        },\n        angular: {\n            src:  ['public/*.js', 'public/*/*.js', 'public/*/*/*.js'], // SOURCE PATH\n            dest: 'assets/js/src/angular/angular-main.js' // DESTINATION PATH\n        }\n    },\n\n    // JS MINIFICATION\n    uglify: {\n        build: {\n            files: {\n                'assets/js/dist/main.min.js': 'assets/js/src/**/*.js' // DESTINATION PATH : SOURCE PATH\n            }\n        }\n    },\n\n    // IMAGES TASK CONFIGURATION\n\n    // IMAGES OPTIMIZATION\n    imagemin: {\n        target: {\n            options: {\n                optimizationLevel: 3,\n                progressive: true,\n                use: [pngquant(), mozjpeg(), gifsicle()]\n            },\n            files: [{\n                expand: true,\n                cwd: 'public/src/images/',\n                src: ['**/*.{png,jpg,jpeg,gif}'],\n                dest: 'public/dist/images/'\n            }]\n        }\n    },\n\n    // BOWER TASKS CONFIG\n\n    // BOWER AUTO IMPORT\n    wiredep: {\n        task: {\n            src: ['app/views/master.ejs','app/views/scripts.ejs'], // DESTINATION PATH/S\n        },\n        options: {\n            ignorePath: '../../assets', // LIB PATH ADJUSTMENT\n        }\n    },\n\n    // CSS TASKS CONFIG\n\n    // CSS CONCATENATION\n    concat_css: {\n        all: {\n            src: 'assets/css/src/**/*.css', // SOURCE PATH\n            dest: 'assets/css/dist/style.css' // DESTINATION PATH\n        }\n    },\n\n    // CSS MINIFICATION\n    cssmin: {\n        build: {\n            files: {\n                // DESTINATION PATH : SOURCE PATH\n                'assets/css/dist/style.min.css': 'assets/css/dist/style.css'\n            }\n        }\n    },\n\n    // WATCH TASK CONFIG (USEFUL FOR REALTIME CHANGES - RUN TASKS ON FILE CHANGES)\n    watch: {\n        bower: {\n            files: ['assets/lib/*'], // PATH TO WATCH\n            tasks: ['wiredep'] // TASK TO RUN ON CHANGES\n        },\n        css: {\n            files: ['assets/css/src/**/*.css'],\n            tasks: ['concat_css', 'cssmin']\n        },\n        angular: {\n            files: 'public/**/*.js',\n            tasks: ['concat', 'uglify']\n        },\n    },\n\n    // CONCURRENT TASK CONFIG (USEFUL TO RUN CONCURRENT TASKS)\n    concurrent: {\n        options: {\n            logConcurrentOutput: true\n        },\n        tasks: ['nodemon', 'watch']\n    }\n})\n\n// DEFAULT RUN TASK DECLARATION (DEFAULT IS RUNNING SIMPLY BY LAUNCHING GRUNT)\ngrunt.registerTask('default', ['wiredep', 'imagemin', 'concat_css', 'cssmin', 'concat', 'uglify', 'concurrent']);\n}", 
            "title": "Gruntfile"
        }, 
        {
            "location": "/grunt/#notes", 
            "text": "You can fin a lot of useful task to automate more things like css compilers and more! Check on Google", 
            "title": "Notes"
        }, 
        {
            "location": "/mongodb/", 
            "text": "Mongo DB Utils\n\n\nHere you can find a basic MongoDB commands line\n\n\n\n\nIf you don't have git installed you will need also to install brew package manager:\n\n\n- 'ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"'\n- 'brew install mongodb'\n\n\n\nRun\n\n\nIf you don't have git installed you will need also to install brew package manager:\n\n\n- 'mongod'\n\n\n\nCheck if is Running\n\n\nTo check if you have any mongo instance running:\n\n\n- 'ps -ax | grep mongo'\n\n\n\nKill Mongo Instance\n\n\nMove to your command line window and type:\n\n\n- use 'kill PID' code that the previous Check if is Running command provide\n\n\n\nShell\n\n\nMove to your command line window and type:\n\n\n- 'mongo'\n\n\n\nDB List\n\n\nFrom the mongo opened shell:\n\n\n- 'show dbs'\n\n\n\nUse/Create DB\n\n\nFrom the mongo opened shell:\n\n\n- 'use nameOfYourDB' (if the DB doesn't exist mongo will move you to a new one, but it will not be totally created until you make an insert)\n\n\n\nCollections List\n\n\nFrom the mongo opened shell:\n\n\n- 'show collections'\n\n\n\nCreate a new Document / Collection ('tables')\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.insert({\"key1\":\"value1\", \"key2\": \"value2\"})'\n\n\n\nQuery all Document Entries\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.find().pretty()'\n\n\n\nFiltered Query\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.find({ \"key1\": \"value1\"})'\n\n\n\nUpdate Document\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.update({\"key1\": \"value1\"}, { $set: {\"key2\": \"value2\"}})'\n\n\n\nDeleting a Document\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.drop()'\n\n\n\nDeleting Multiple Documents Entries\n\n\nFrom the mongo opened shell:\n\n\n- 'db.nameOfTheDocument.remove({ \"key1\": \"value1\" })'\n\n\n\nDeleting DB\n\n\nFrom the mongo opened shell and make sure you are using the DB that you want to delete typing 'use nameOfYourDB':\n\n\n- 'db.dropDatabase()'\n\n\n\nDeleting single entry\n\n\nYou can delete single entries just specifying '_id' value\n\n\n- 'db.collection.remove( {\"_id\": ObjectId(\"xxxx\")} )'", 
            "title": "Mongo DB Utils"
        }, 
        {
            "location": "/mongodb/#mongo-db-utils", 
            "text": "Here you can find a basic MongoDB commands line", 
            "title": "Mongo DB Utils"
        }, 
        {
            "location": "/mongodb/#run", 
            "text": "If you don't have git installed you will need also to install brew package manager:  - 'mongod'", 
            "title": "Run"
        }, 
        {
            "location": "/mongodb/#check-if-is-running", 
            "text": "To check if you have any mongo instance running:  - 'ps -ax | grep mongo'", 
            "title": "Check if is Running"
        }, 
        {
            "location": "/mongodb/#kill-mongo-instance", 
            "text": "Move to your command line window and type:  - use 'kill PID' code that the previous Check if is Running command provide", 
            "title": "Kill Mongo Instance"
        }, 
        {
            "location": "/mongodb/#shell", 
            "text": "Move to your command line window and type:  - 'mongo'", 
            "title": "Shell"
        }, 
        {
            "location": "/mongodb/#db-list", 
            "text": "From the mongo opened shell:  - 'show dbs'", 
            "title": "DB List"
        }, 
        {
            "location": "/mongodb/#usecreate-db", 
            "text": "From the mongo opened shell:  - 'use nameOfYourDB' (if the DB doesn't exist mongo will move you to a new one, but it will not be totally created until you make an insert)", 
            "title": "Use/Create DB"
        }, 
        {
            "location": "/mongodb/#collections-list", 
            "text": "From the mongo opened shell:  - 'show collections'", 
            "title": "Collections List"
        }, 
        {
            "location": "/mongodb/#create-a-new-document-collection-tables", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.insert({\"key1\":\"value1\", \"key2\": \"value2\"})'", 
            "title": "Create a new Document / Collection ('tables')"
        }, 
        {
            "location": "/mongodb/#query-all-document-entries", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.find().pretty()'", 
            "title": "Query all Document Entries"
        }, 
        {
            "location": "/mongodb/#filtered-query", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.find({ \"key1\": \"value1\"})'", 
            "title": "Filtered Query"
        }, 
        {
            "location": "/mongodb/#update-document", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.update({\"key1\": \"value1\"}, { $set: {\"key2\": \"value2\"}})'", 
            "title": "Update Document"
        }, 
        {
            "location": "/mongodb/#deleting-a-document", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.drop()'", 
            "title": "Deleting a Document"
        }, 
        {
            "location": "/mongodb/#deleting-multiple-documents-entries", 
            "text": "From the mongo opened shell:  - 'db.nameOfTheDocument.remove({ \"key1\": \"value1\" })'", 
            "title": "Deleting Multiple Documents Entries"
        }, 
        {
            "location": "/mongodb/#deleting-db", 
            "text": "From the mongo opened shell and make sure you are using the DB that you want to delete typing 'use nameOfYourDB':  - 'db.dropDatabase()'", 
            "title": "Deleting DB"
        }, 
        {
            "location": "/mongodb/#deleting-single-entry", 
            "text": "You can delete single entries just specifying '_id' value  - 'db.collection.remove( {\"_id\": ObjectId(\"xxxx\")} )'", 
            "title": "Deleting single entry"
        }, 
        {
            "location": "/laravel/", 
            "text": "Laravel Utils\n\n\nComposer\n\n\nPhp dependencies manager.\nInstall with\n\n\n- curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n\n\n\nAdd something to your composer json\n\n\n- composer require phpspec/phpspec (vendor/pck)\n\n\n\nMore packages at\n\n\n- https://packagist.org/\n\n\n\nCreate a new virgin laravel project with\n\n\n- composer create-project laravel/laravel NAME\n\n\n\nLaravel Vagrant\n\n\nLaravel ready environment.\nYou will need installed\n\n\n- virtualbox\n- vagrant\n- ansible 2+\n\n\n\nSuggested repositories\n\n\n- https://github.com/andreafspeziale/laravel_vagrant\n- https://github.com/gab88slash/vagrant-modern-php-development\n\n\n\nStructure\n\n\napp HTTP --\n routes.php --\n route file\n\n\n- Route::get('about', 'PagesController@about');\n\n\n\nThis will search a PagesController with a method \"about\"\n\n\nEnvironment\n\n\nEverything is inside .env file\n\n\nCreating new controller\n\n\nYou can do this with laravel cli called Artisan\n\n\n- php artisan make:controller PagesController --plain (--plain doesn't exist anymore)\n\n\n\nfor help\n\n\n- php artisan help make:controller\n\n\n\nPassing data to view\n\n\nFirst way\n\n\n- return view('pages.about')-\nwith('name', $name);\n- return view('pages.about')-\nwith([\n        'firstName' =\n 'Andrea',\n        'lastName' =\n 'Speziale'\n    ]);\n- return view('pages.about', $data);\n- return view('pages.about', compact('firstName', 'lastName'));\n\n\n\nin the html\n\n\n- {!! $name !!} with escaping\n- {{ $name }}\n\n\n\nMaster and sections\n\n\nCreate an app.blade.php file which will contain the basic html, in master:\n\n\nbody\n\n    \ndiv class=\"container\"\n\n        @yield('content')\n    \n/div\n\n    @yield('footer') \n!-- You will be able to add this only in specific files --\n\n\n/body\n\n\n\n\nIn a random contact page:\n\n\n@extends('app')\n@section('content')\n    \nh1\nContact Me!\n/h1\n\n    \np\nLorem ipsum\n/p\n\n@stop\n@section('footer')\n    \nscript\nsome script\n/script\n \n!-- You will be able to avoid it in other pages --\n\n@stop\n\n\n\nFast IF statement in blade\n\n\nInstead of opening php tags\n\n\n@if($firstName == \"Andrea\")\n    \nh1\nAbout me: {{ $firstName }} {{ $lastName }}\n/h1\n\n    \np\nLorem ipsum\n/p\n\n@else\n    \np\nError\n/p\n\n@endif\n\n\n\nWe have also\n\n\n- @unless()\n- The controller returning something like: $people = ['Alex', 'Gabri', 'Andre'];\n\n@if(count($people))\n    \nh3\nPeople I like:\n/h3\n\n    \nul\n\n        @foreach($people as $person)\n            \nli\n{{ $person }}\n/li\n\n        @endforeach\n    \n/ul\n\n@endif\n\n\n\nMore about configuration\n\n\n- config folder--\ndatabase.php\n\n\n\nFor example u will find mysql ready to get the configuration from the .env file.\nThis file is also ignored by the .gitignore file, so you can have separate config for local and production environment\n\n\n- 'host' =\n env('DB_HOST', 'localhost')\n\n\n\nThis will be searching for a DB_HOST variable in the env file and if it will be not found, will take the localhost as default\n\n\n- Default connection to mysql from database.php 'default' =\n env('DB_CONNECTION', 'mysql')\n\n\n\nMigration\n\n\nVersion control for DBs.\nTables as php classes.\n\n\nCreate the class and then create the table.\n\n\n[I had to install manually sqlite - sudo apt-get install php5-sqlite]\n\n\n- php artisan migrate\n- php artisan migrate:reset [roolback all migration]\n- php artisan migrate:rollback [roolback last migration]\n\n\n\nExample --\n create a table for Articles\n\n\n-  php artisan make:migration create_articles_table --create=\"articles\"\n\n\n\nIf for example you want to add a new column for Articles\n\n\n- php artisan make:migration add_excerpt_to_articles_table --table=\"articles\"\n\n\n\nIt will create a new file which \"extends\" articles and you will write in the up function the new column\n\n\n- $table-\ntext(\"excerpt\")-\nnullable(); //if you agree that your article excerpt could be empty\n\n\n\nand you will write in the down function\n\n\n- $table-\ndropColumn(\"excerpt\");\n\n\n\ntry to migrate it and rollback it too!\n\n\n- php artisan migrate\n- php artisan:rollback --\n ERROR --\n you will need composer require doctrine/dbal\n\n\n\nEloquent [ORM]\n\n\nRecord implementation\n\n\n- php artisan create:model Article\n\n\n\nUseful laravel cli for testing\n    - php artisan tinker\n        - $article = new App\\Article\n        - $article-\ntitle='my first article'\n        - $article-\nbody='lorem ipsum'\n        - $article-\npublished_at=Carbon\\Carbon::now();\n        - $article or $article-\ntoArray();\n\n\nNow make it persistent\n\n\n    - $article-\nsave();\n\n\n\nFetching it\n\n\n    - App\\Article::all()-\ntoArray();\n\n\n\nUpdating\n\n\n    - $article-\ntitle = 'My Updated First Article';\n    - $article-\nsave();\n    - App\\Article::all()-\ntoArray();\n\n\n\nHow we could do it: select * from table where id = 1;\n\n\n    - $article = App\\Article::find(1);\n    - $article or $article-\ntoArray();\n\n\n\nHow we could do it: select * from articles where body = 'lorem ipsum';\n\n\n    - $article = App\\Article::where('body', 'lorem ipsum')-\nget();\n    - $article = App\\Article::where('body', 'lorem ipsum')-\nfirst(); to get the very first\n\n\n\nFill the object in one time\n\n\n    - $article = App\\Article::create(['title'=\n'Very new article', 'body'=\n'New body', 'published_at'=\nCarbon\\Carbon::now()]);\n\nyou will get a MassAssignmentException, so you will go to Article.php model and update it with\n\n    -   protected $fillable=[\n            'title',\n            'body',\n            'published_at'\n        ];\n\nexit from the tinker, re-open it and retry\n\n    - $article = App\\Article::create(['title'=\n'Very new article', 'body'=\n'New body', 'published_at'=\nCarbon\\Carbon::now()]);\n\n\n\nA fast way to update\n\n\n    - $article = App\\Article::find(2);\n    - $article-\nupdate(['body' =\n 'Updated!!']); //filling and saving it\n\n\n\nBasic model/controller/view workflow\n\n\nDifferent way to create routes\n\n\nFor small stuff you can create directly from route file something like\n\n\nRoute::get('foo', function(){\n    return \"bar\";\n});\n\n\n\nor\n\n\nRoute::get('articles', 'ArticlesController@index');\n\n\n\nnow create a controller from command line\n\n\n- php artisan make:controller ArticlesController\n\n\n\nand add an index method to see if does it works\n\n\nclass ArticlesController extends Controller\n{\n    public function index() {\n        return \"Getting all articles\";\n    }\n}\n\n\n\nadding the class on the top\n\n\n- use App\\Article;\n\n\n\nand try to return all the articles (and then check the browser)\n\n\nclass ArticlesController extends Controller\n{\n    public function index() {\n        //return \"Getting all articles\";\n\n        //fetching all the articles with eloquent\n        $articles = \\App\\Article::all();\n        return $articles;\n    }\n}\n\n\n\nNow lets try to return a view with some stuff\n\n\nclass ArticlesController extends Controller\n{\n    public function index() {\n        //return \"Getting all articles\";\n\n        //fetching all the articles with eloquent\n        $articles = \\App\\Article::all();\n        return view(\"articles.index\", compact('articles'));\n        //or return view(\"articles.index\")-\nwith('articles', $articles);\n    }\n}\n\n\n\nnow add the folder and file\n\n\n- mkdir resources/views/articles/index.blade.php\n\n\n\nand fill it with\n\n\n@extends('app')\n@section('content')\n    \nh1\nArticles\n/h1\n\n    \nhr\n\n    @foreach($articles as $article)\n        \narticle\n\n            \na href=\"#\"\n\n                \nh3\n{{$article-\ntitle}}\n/h3\n\n            \n/a\n\n            \ndiv class=\"body\"\n{{$article-\nbody}}\n/div\n\n        \n/article\n\n    @endforeach\n@stop\n\n\n\nand what about clicking the article title? Lets add a new route\n\n\n- Route::get('articles/{id}', 'ArticlesController@show');\n\n\n\nNow add the new function inside the controller accepting the $id\n\n\npublic function show($id) {\n    $article = Article::findOrFail($id);\n\n    /*to avoid this you can use findOrFail\n        dd($article);\n        if(is_null($article)) { //if(!$article)\n            abort(404);\n        }\n    */\n\n    return view(\"articles.show\", compact('article'));\n}\n\n\n\nand create the view\n\n\n- mkdir resources/views/articles/show.blade.php\n\n@extends('app')\n@section('content')\n    \nh1\nArticles\n/h1\n\n    \nhr\n\n    @foreach($articles as $article)\n        \narticle\n\n            {{--\na href=\"/articles/{{$article-\nid}}\"\n--}}\n            {{--\na href=\"{{url('/articles', $article-\nid)}}\"\n--}}\n            \na href=\"{{action('ArticlesController@show', [$article-\nid])}}\"\n\n                \nh3\n{{$article-\ntitle}}\n/h3\n\n            \n/a\n\n            \ndiv class=\"body\"\n{{$article-\nbody}}\n/div\n\n        \n/article\n\n    @endforeach\n@stop\n\n\n\nDefining Relationships With Eloquent\n\n\nWe have for instance a Card which has many Notes. \nEach Note was wtitten by a User.\n\n\nYou can see below the models that describes those relationships:\n\n\n- Card Model\nclass Card extends Model\n{\n    public function notes()\n    {\n        return $this-\nhasMany(Note::class);\n    }\n\n    public function addNote(Note $note, $userId)\n    {\n        $note-\nuser_id = $userId;\n        return $this-\nnotes()-\nsave($note);\n    }\n}\n\n- Note Model\nclass Note extends Model\n{\n    protected $fillable = ['body'];\n\n    public function card()\n    {\n        return $this-\nbelongsTo(Card::class);\n    }\n\n    public function user()\n    {\n        return $this-\nbelongsTo(User::class);\n    }\n\n    public function by(User $user)\n    {\n        $this-\nuser_id = $user-\nid;\n    }\n}\n\n\n\nForms \n Validation\n\n\nLet's add a Note to a Card for instance:\n\n\n- add a posting route\nRoute::post('cards/{card}/notes', 'NotesController@store');\n\n- add a form from the view\n\nh3\nAdd a new note\n/h3\n\n    \nform action=\"/cards/{{ $card-\nid }}/notes\" method=\"POST\"\n\n        {{-- showing the token --}}\n        {!! csrf_token() !!}\n        \ndiv class=\"form-group\"\n\n            \ntextarea name=\"body\" class=\"form-control\"\n{{ old('body') }}\n/textarea\n\n        \n/div\n\n        \ndiv class=\"form-group\"\n\n            \nbutton type=\"submit\" class=\"btn btn-default pull-right\"\nAdd note\n/button\n\n        \n/div\n\n        {{-- this include the generated token in the request --}}\n        {!! csrf_field() !!}\n    \n/form\n\n    {{-- checking the validation exception message --}}\n    {{-- {{ var_dump($errors) }} --}}\n    @if(count($errors))\n        \nul\n\n            @foreach($errors-\nall() as $error)\n                \nli\n{{ $error }}\n/li\n\n            @endforeach\n        \n/ul\n\n    @endif\n\n- from the posting route by the store method\npublic function store(Request $request, Card $card)\n    {\n        $this-\nvalidate($request, [\n            'body' =\n 'required|min:10'\n        ]);\n\n        $note = New Note($request-\nall());\n\n        $card-\naddNote($note, 1);\n        return back();\n    }\n\n\n\nUpdating Record\n\n\nLet's try to update a Note\n\n\n- add a get and patch route to serve the update page and perform action \nRoute::get('notes/{note}/edit', 'NotesController@edit');\nRoute::patch('notes/{note}', 'NotesController@update');\n\n- edit form from the edit note page\n\nform action=\"/notes/{{ $note-\nid }}\" method=\"POST\"\n\n    {{ method_field('PATCH') }}\n    \ndiv class=\"form-group\"\n\n        \ntextarea name=\"body\" class=\"form-control\"\n{{ $note-\nbody }}\n/textarea\n\n    \n/div\n\n    \ndiv class=\"form-group\"\n\n        \nbutton type=\"submit\" class=\"btn btn-default pull-right\"\nUpdate note\n/button\n\n    \n/div\n\n    {!! csrf_field() !!}\n\n/form\n\n\n- and the methods in the controller\npublic function edit(Note $note)\n{\n    return view('notes.edit', compact('note'));\n}\n\npublic function update(Request $request, Note $note)\n{\n    $note-\nupdate($request-\nall());\n    return back();\n}\n\n\n\nAuthenticate Your Users\n\n\nBasic login/registration, usually is done at the very beginning of your project\n\n\n- php artisan make:auth\n- php artisan migrate\n\n\n\nNow you should be ready to test the laravel register and login out of the box functions\n\n\nTo test the forgotten psw e-mail you should change your local .env like this\n\n\n- MAIL_DRIVER=log\n\n\n\nSetup also from config/mail.php\n\n\n- 'from' =\n ['address' =\n 'yourmail@something.something', 'name' =\n 'My Company Support']\n\n\n\nNow if you try to restore your password it will run using your registration e-mail \nbut you wont receive any e-mail, you will be able to check in\n\n\n- more storage/logs/laravel.log or tail -f storage/logs/laravel.log\n\n\n\nYou should see something like\n\n\n- Date: Sat, 30 Jul 2016 14:37:53 +0000\n  Subject: Your Password Reset Link\n  From: Andrea Speziale Mail \nandreaf.speziale@gmail.com\n\n  To: andreaf.speziale@gmail.com\n  MIME-Version: 1.0\n  Content-Type: text/html; charset=utf-8\n  Content-Transfer-Encoding: quoted-printable\n\n  Click here to reset your password: \n  \na href=\"http://localhost:8080/password/reset/5d09c9f1640669def46092bbecc8c02949be8b51bd1a1c49a180dea5613e1b9c?email=registeredMail%40gmail.com\"\n http://localhost:8080/password/reset/5d09c9f1640669def46092bbecc8c02949be8b51bd1a1c49a180dea5613e1b9c?email=registeredMail%40gmail.com \n/a\n\n\n\n\nIf you copy on your browser the link you will be redirect to the password reset page\n\n\nNotice that in your routes file laravel added \n\n\n- Route::auth();\n\n\n\nIn Router.php searching for auth you will find all the route\n\n\nIf you need to override something you will find everything in\n\n\n- Http/Controller/auth\n\n\n\nAll the views are stored in\n\n\n- Resources/views/auth\n\n\n\nMiddleware\n\n\nYour application is like an onion, so when a request arrives it goes through this onion before gettin' into the core.\nThose layers are the middleware.\n\n\nFor instance the middleware group WEB\n\n\n- app/Http/Kernel\n'web' =\n [\n    \\App\\Http\\Middleware\\EncryptCookies::class,\n    \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n    \\Illuminate\\Session\\Middleware\\StartSession::class,\n    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n    \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n],\n\n\n\nThe request will pass through those action\n\n\n- EncryptCookies\n- AddQueuedCookiesToResponse\n- StartSession\n- ShareErrorsFromSession -\n this make the var $errors in each view real\n- VerifyCsrfToken -\n generates the hiddend input in the forms {{ csrf_field() }}\n\n\n\nEach middleware class has a handle class\n\n\n- public function handle\n\n\n\nresponsible for processing the request in someway and pass it to the next layer.\n\n\nUsually we make some kind of check and then we will pass it to the next level of the onion or abort.\n\n\nWe have also GLOBAL Middleware that will be used for every single request like\n\n\n- \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n\n\n\nThis is checking if the website is in Maintenance Mode, you can try to put it in with\n\n\n- php artisan down\n\n\n\nTo restore \n\n\n- php artisan down\n\n\n\nOr we have optional middleware called ROUTE Middleware, you can create a middleware with artisan like this\n\n\n- php artisan make:middleware MustBeAdministrator\n\n\n\nFor instance\n\n\n?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\npublic function handle($request, Closure $next)\n{\n    /*\n     * If signed u will get the signed user if not you will get null\n     * */\n\n    $user = $request-\nuser();\n\n    /*\n     * Checking if is admin\n     * if($user \n $user-\nisAdmin)\n     * */\n    if($user \n $user-\nusername == 'JohnAdministratorDoe'){\n        return $next($request);\n    }\n\n    /*\n     * If not aborting it\n     * */\n    abort(404, 'No way.');\n}\n\n\n\nGo to\n\n\n- app/Http/kernel.php\nprotected $routeMiddleware = [\n    'auth' =\n \\App\\Http\\Middleware\\Authenticate::class,\n    'auth.basic' =\n \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n    'can' =\n \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,\n    'guest' =\n \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n    'throttle' =\n \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    'admin' =\n \\App\\Http\\Middleware\\MustBeAdministrator::class\n];\n\n\n\nSession Messages", 
            "title": "Laravel Utils"
        }, 
        {
            "location": "/laravel/#laravel-utils", 
            "text": "", 
            "title": "Laravel Utils"
        }, 
        {
            "location": "/laravel/#composer", 
            "text": "Php dependencies manager.\nInstall with  - curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer  Add something to your composer json  - composer require phpspec/phpspec (vendor/pck)  More packages at  - https://packagist.org/  Create a new virgin laravel project with  - composer create-project laravel/laravel NAME", 
            "title": "Composer"
        }, 
        {
            "location": "/laravel/#laravel-vagrant", 
            "text": "Laravel ready environment.\nYou will need installed  - virtualbox\n- vagrant\n- ansible 2+  Suggested repositories  - https://github.com/andreafspeziale/laravel_vagrant\n- https://github.com/gab88slash/vagrant-modern-php-development", 
            "title": "Laravel Vagrant"
        }, 
        {
            "location": "/laravel/#structure", 
            "text": "app HTTP --  routes.php --  route file  - Route::get('about', 'PagesController@about');  This will search a PagesController with a method \"about\"", 
            "title": "Structure"
        }, 
        {
            "location": "/laravel/#environment", 
            "text": "Everything is inside .env file", 
            "title": "Environment"
        }, 
        {
            "location": "/laravel/#creating-new-controller", 
            "text": "You can do this with laravel cli called Artisan  - php artisan make:controller PagesController --plain (--plain doesn't exist anymore)  for help  - php artisan help make:controller", 
            "title": "Creating new controller"
        }, 
        {
            "location": "/laravel/#passing-data-to-view", 
            "text": "First way  - return view('pages.about')- with('name', $name);\n- return view('pages.about')- with([\n        'firstName' =  'Andrea',\n        'lastName' =  'Speziale'\n    ]);\n- return view('pages.about', $data);\n- return view('pages.about', compact('firstName', 'lastName'));  in the html  - {!! $name !!} with escaping\n- {{ $name }}", 
            "title": "Passing data to view"
        }, 
        {
            "location": "/laravel/#master-and-sections", 
            "text": "Create an app.blade.php file which will contain the basic html, in master:  body \n     div class=\"container\" \n        @yield('content')\n     /div \n    @yield('footer')  !-- You will be able to add this only in specific files --  /body   In a random contact page:  @extends('app')\n@section('content')\n     h1 Contact Me! /h1 \n     p Lorem ipsum /p \n@stop\n@section('footer')\n     script some script /script   !-- You will be able to avoid it in other pages -- \n@stop", 
            "title": "Master and sections"
        }, 
        {
            "location": "/laravel/#fast-if-statement-in-blade", 
            "text": "Instead of opening php tags  @if($firstName == \"Andrea\")\n     h1 About me: {{ $firstName }} {{ $lastName }} /h1 \n     p Lorem ipsum /p \n@else\n     p Error /p \n@endif  We have also  - @unless()\n- The controller returning something like: $people = ['Alex', 'Gabri', 'Andre'];\n\n@if(count($people))\n     h3 People I like: /h3 \n     ul \n        @foreach($people as $person)\n             li {{ $person }} /li \n        @endforeach\n     /ul \n@endif", 
            "title": "Fast IF statement in blade"
        }, 
        {
            "location": "/laravel/#more-about-configuration", 
            "text": "- config folder-- database.php  For example u will find mysql ready to get the configuration from the .env file.\nThis file is also ignored by the .gitignore file, so you can have separate config for local and production environment  - 'host' =  env('DB_HOST', 'localhost')  This will be searching for a DB_HOST variable in the env file and if it will be not found, will take the localhost as default  - Default connection to mysql from database.php 'default' =  env('DB_CONNECTION', 'mysql')", 
            "title": "More about configuration"
        }, 
        {
            "location": "/laravel/#migration", 
            "text": "Version control for DBs.\nTables as php classes.  Create the class and then create the table.  [I had to install manually sqlite - sudo apt-get install php5-sqlite]  - php artisan migrate\n- php artisan migrate:reset [roolback all migration]\n- php artisan migrate:rollback [roolback last migration]  Example --  create a table for Articles  -  php artisan make:migration create_articles_table --create=\"articles\"  If for example you want to add a new column for Articles  - php artisan make:migration add_excerpt_to_articles_table --table=\"articles\"  It will create a new file which \"extends\" articles and you will write in the up function the new column  - $table- text(\"excerpt\")- nullable(); //if you agree that your article excerpt could be empty  and you will write in the down function  - $table- dropColumn(\"excerpt\");  try to migrate it and rollback it too!  - php artisan migrate\n- php artisan:rollback --  ERROR --  you will need composer require doctrine/dbal", 
            "title": "Migration"
        }, 
        {
            "location": "/laravel/#eloquent-orm", 
            "text": "Record implementation  - php artisan create:model Article  Useful laravel cli for testing\n    - php artisan tinker\n        - $article = new App\\Article\n        - $article- title='my first article'\n        - $article- body='lorem ipsum'\n        - $article- published_at=Carbon\\Carbon::now();\n        - $article or $article- toArray();  Now make it persistent      - $article- save();  Fetching it      - App\\Article::all()- toArray();  Updating      - $article- title = 'My Updated First Article';\n    - $article- save();\n    - App\\Article::all()- toArray();  How we could do it: select * from table where id = 1;      - $article = App\\Article::find(1);\n    - $article or $article- toArray();  How we could do it: select * from articles where body = 'lorem ipsum';      - $article = App\\Article::where('body', 'lorem ipsum')- get();\n    - $article = App\\Article::where('body', 'lorem ipsum')- first(); to get the very first  Fill the object in one time      - $article = App\\Article::create(['title'= 'Very new article', 'body'= 'New body', 'published_at'= Carbon\\Carbon::now()]);\n\nyou will get a MassAssignmentException, so you will go to Article.php model and update it with\n\n    -   protected $fillable=[\n            'title',\n            'body',\n            'published_at'\n        ];\n\nexit from the tinker, re-open it and retry\n\n    - $article = App\\Article::create(['title'= 'Very new article', 'body'= 'New body', 'published_at'= Carbon\\Carbon::now()]);  A fast way to update      - $article = App\\Article::find(2);\n    - $article- update(['body' =  'Updated!!']); //filling and saving it", 
            "title": "Eloquent [ORM]"
        }, 
        {
            "location": "/laravel/#basic-modelcontrollerview-workflow", 
            "text": "Different way to create routes  For small stuff you can create directly from route file something like  Route::get('foo', function(){\n    return \"bar\";\n});  or  Route::get('articles', 'ArticlesController@index');  now create a controller from command line  - php artisan make:controller ArticlesController  and add an index method to see if does it works  class ArticlesController extends Controller\n{\n    public function index() {\n        return \"Getting all articles\";\n    }\n}  adding the class on the top  - use App\\Article;  and try to return all the articles (and then check the browser)  class ArticlesController extends Controller\n{\n    public function index() {\n        //return \"Getting all articles\";\n\n        //fetching all the articles with eloquent\n        $articles = \\App\\Article::all();\n        return $articles;\n    }\n}  Now lets try to return a view with some stuff  class ArticlesController extends Controller\n{\n    public function index() {\n        //return \"Getting all articles\";\n\n        //fetching all the articles with eloquent\n        $articles = \\App\\Article::all();\n        return view(\"articles.index\", compact('articles'));\n        //or return view(\"articles.index\")- with('articles', $articles);\n    }\n}  now add the folder and file  - mkdir resources/views/articles/index.blade.php  and fill it with  @extends('app')\n@section('content')\n     h1 Articles /h1 \n     hr \n    @foreach($articles as $article)\n         article \n             a href=\"#\" \n                 h3 {{$article- title}} /h3 \n             /a \n             div class=\"body\" {{$article- body}} /div \n         /article \n    @endforeach\n@stop  and what about clicking the article title? Lets add a new route  - Route::get('articles/{id}', 'ArticlesController@show');  Now add the new function inside the controller accepting the $id  public function show($id) {\n    $article = Article::findOrFail($id);\n\n    /*to avoid this you can use findOrFail\n        dd($article);\n        if(is_null($article)) { //if(!$article)\n            abort(404);\n        }\n    */\n\n    return view(\"articles.show\", compact('article'));\n}  and create the view  - mkdir resources/views/articles/show.blade.php\n\n@extends('app')\n@section('content')\n     h1 Articles /h1 \n     hr \n    @foreach($articles as $article)\n         article \n            {{-- a href=\"/articles/{{$article- id}}\" --}}\n            {{-- a href=\"{{url('/articles', $article- id)}}\" --}}\n             a href=\"{{action('ArticlesController@show', [$article- id])}}\" \n                 h3 {{$article- title}} /h3 \n             /a \n             div class=\"body\" {{$article- body}} /div \n         /article \n    @endforeach\n@stop", 
            "title": "Basic model/controller/view workflow"
        }, 
        {
            "location": "/laravel/#defining-relationships-with-eloquent", 
            "text": "We have for instance a Card which has many Notes. \nEach Note was wtitten by a User.  You can see below the models that describes those relationships:  - Card Model\nclass Card extends Model\n{\n    public function notes()\n    {\n        return $this- hasMany(Note::class);\n    }\n\n    public function addNote(Note $note, $userId)\n    {\n        $note- user_id = $userId;\n        return $this- notes()- save($note);\n    }\n}\n\n- Note Model\nclass Note extends Model\n{\n    protected $fillable = ['body'];\n\n    public function card()\n    {\n        return $this- belongsTo(Card::class);\n    }\n\n    public function user()\n    {\n        return $this- belongsTo(User::class);\n    }\n\n    public function by(User $user)\n    {\n        $this- user_id = $user- id;\n    }\n}", 
            "title": "Defining Relationships With Eloquent"
        }, 
        {
            "location": "/laravel/#forms-validation", 
            "text": "Let's add a Note to a Card for instance:  - add a posting route\nRoute::post('cards/{card}/notes', 'NotesController@store');\n\n- add a form from the view h3 Add a new note /h3 \n     form action=\"/cards/{{ $card- id }}/notes\" method=\"POST\" \n        {{-- showing the token --}}\n        {!! csrf_token() !!}\n         div class=\"form-group\" \n             textarea name=\"body\" class=\"form-control\" {{ old('body') }} /textarea \n         /div \n         div class=\"form-group\" \n             button type=\"submit\" class=\"btn btn-default pull-right\" Add note /button \n         /div \n        {{-- this include the generated token in the request --}}\n        {!! csrf_field() !!}\n     /form \n    {{-- checking the validation exception message --}}\n    {{-- {{ var_dump($errors) }} --}}\n    @if(count($errors))\n         ul \n            @foreach($errors- all() as $error)\n                 li {{ $error }} /li \n            @endforeach\n         /ul \n    @endif\n\n- from the posting route by the store method\npublic function store(Request $request, Card $card)\n    {\n        $this- validate($request, [\n            'body' =  'required|min:10'\n        ]);\n\n        $note = New Note($request- all());\n\n        $card- addNote($note, 1);\n        return back();\n    }", 
            "title": "Forms &amp; Validation"
        }, 
        {
            "location": "/laravel/#updating-record", 
            "text": "Let's try to update a Note  - add a get and patch route to serve the update page and perform action \nRoute::get('notes/{note}/edit', 'NotesController@edit');\nRoute::patch('notes/{note}', 'NotesController@update');\n\n- edit form from the edit note page form action=\"/notes/{{ $note- id }}\" method=\"POST\" \n    {{ method_field('PATCH') }}\n     div class=\"form-group\" \n         textarea name=\"body\" class=\"form-control\" {{ $note- body }} /textarea \n     /div \n     div class=\"form-group\" \n         button type=\"submit\" class=\"btn btn-default pull-right\" Update note /button \n     /div \n    {!! csrf_field() !!} /form \n\n- and the methods in the controller\npublic function edit(Note $note)\n{\n    return view('notes.edit', compact('note'));\n}\n\npublic function update(Request $request, Note $note)\n{\n    $note- update($request- all());\n    return back();\n}", 
            "title": "Updating Record"
        }, 
        {
            "location": "/laravel/#authenticate-your-users", 
            "text": "Basic login/registration, usually is done at the very beginning of your project  - php artisan make:auth\n- php artisan migrate  Now you should be ready to test the laravel register and login out of the box functions  To test the forgotten psw e-mail you should change your local .env like this  - MAIL_DRIVER=log  Setup also from config/mail.php  - 'from' =  ['address' =  'yourmail@something.something', 'name' =  'My Company Support']  Now if you try to restore your password it will run using your registration e-mail \nbut you wont receive any e-mail, you will be able to check in  - more storage/logs/laravel.log or tail -f storage/logs/laravel.log  You should see something like  - Date: Sat, 30 Jul 2016 14:37:53 +0000\n  Subject: Your Password Reset Link\n  From: Andrea Speziale Mail  andreaf.speziale@gmail.com \n  To: andreaf.speziale@gmail.com\n  MIME-Version: 1.0\n  Content-Type: text/html; charset=utf-8\n  Content-Transfer-Encoding: quoted-printable\n\n  Click here to reset your password: \n   a href=\"http://localhost:8080/password/reset/5d09c9f1640669def46092bbecc8c02949be8b51bd1a1c49a180dea5613e1b9c?email=registeredMail%40gmail.com\"  http://localhost:8080/password/reset/5d09c9f1640669def46092bbecc8c02949be8b51bd1a1c49a180dea5613e1b9c?email=registeredMail%40gmail.com  /a   If you copy on your browser the link you will be redirect to the password reset page  Notice that in your routes file laravel added   - Route::auth();  In Router.php searching for auth you will find all the route  If you need to override something you will find everything in  - Http/Controller/auth  All the views are stored in  - Resources/views/auth", 
            "title": "Authenticate Your Users"
        }, 
        {
            "location": "/laravel/#middleware", 
            "text": "Your application is like an onion, so when a request arrives it goes through this onion before gettin' into the core.\nThose layers are the middleware.  For instance the middleware group WEB  - app/Http/Kernel\n'web' =  [\n    \\App\\Http\\Middleware\\EncryptCookies::class,\n    \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n    \\Illuminate\\Session\\Middleware\\StartSession::class,\n    \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n    \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n],  The request will pass through those action  - EncryptCookies\n- AddQueuedCookiesToResponse\n- StartSession\n- ShareErrorsFromSession -  this make the var $errors in each view real\n- VerifyCsrfToken -  generates the hiddend input in the forms {{ csrf_field() }}  Each middleware class has a handle class  - public function handle  responsible for processing the request in someway and pass it to the next layer.  Usually we make some kind of check and then we will pass it to the next level of the onion or abort.  We have also GLOBAL Middleware that will be used for every single request like  - \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,  This is checking if the website is in Maintenance Mode, you can try to put it in with  - php artisan down  To restore   - php artisan down  Or we have optional middleware called ROUTE Middleware, you can create a middleware with artisan like this  - php artisan make:middleware MustBeAdministrator  For instance  ?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\npublic function handle($request, Closure $next)\n{\n    /*\n     * If signed u will get the signed user if not you will get null\n     * */\n\n    $user = $request- user();\n\n    /*\n     * Checking if is admin\n     * if($user   $user- isAdmin)\n     * */\n    if($user   $user- username == 'JohnAdministratorDoe'){\n        return $next($request);\n    }\n\n    /*\n     * If not aborting it\n     * */\n    abort(404, 'No way.');\n}  Go to  - app/Http/kernel.php\nprotected $routeMiddleware = [\n    'auth' =  \\App\\Http\\Middleware\\Authenticate::class,\n    'auth.basic' =  \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n    'can' =  \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,\n    'guest' =  \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n    'throttle' =  \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    'admin' =  \\App\\Http\\Middleware\\MustBeAdministrator::class\n];", 
            "title": "Middleware"
        }, 
        {
            "location": "/laravel/#session-messages", 
            "text": "", 
            "title": "Session Messages"
        }, 
        {
            "location": "/ethmining/", 
            "text": "Ethereum Mining\n\n\nDate: 13/03/16, from Turin, Italy with \n3.\n\n\nIntroduction\n\n\nIf your goal is to start mining in pool quickly you can just skip geth installation and start with:\n\n\n- graphic card drivers\n- a wallet (google chrome extension --\n jaxx --\n gives you back a brand new wallet address)\n- ethminer setup\n\n\n\nand you can start mining just running:\n\n\n- ethminer -G -F\n  http://eth1.nanopool.org:8888/yourAddress/nameOfYourMiner/yourEmailForGetNotifications\n\n\n\nWe also recommend that you subscribe to a bitcoin exchange to make the purchase of your currency.\n\n\nOur test environment\n\n\n- Intel i5 CPU\n- 12Gb ram\n- SSD 256Gb\n- Nvidia GTX 770 [driver 352.79 - openCL 1.2]\n- 500W power supply\n- Ubuntu 14.04 - 64bit\n\n\n\nNvidia driver setup\n\n\n- find out the model of your graphics card:\n  $ sudo lspci -vnn | grep -i VGA -A 12\n\n- check your graphic card drivers:\n  http://www.nvidia.com/Download/index.aspx\n\n- add xorg-edgers ppa that provides very latest nvidia\n  drivers:\n  $ sudo add-apt-repository ppa:xorg-edgers/ppa -y\n  $ sudo apt-get update\n\n- grab your drivers with:\n  $ sudo apt-get install nvidia-352\n\n\n\nNvidia cuda toolkit setup\n\n\n- download cuda drivers:\n  https://developer.nvidia.com/cuda-downloads\n  select Linux, x86_64, Ubuntu, 14_04 and Deb(local)\n\n- move to your download folder:\n  $ sudo dpkg -i cuda-repo-ubuntu1404_7.5-18_amd64.deb\n  $ sudo apt-get update\n  $ sudo apt-get install cuda\n\n- reboot the system\n\n\n\nNvidia fan\n\n\n- sudo nvidia-xconfig\n- sudo nvidia-xconfig --cool-bits=4\n- reboot system\n\n\n\nor\n\n\n- sudo apt-get install nvclock\n- nvclock -f -F 70 (to change GPU fan speed 70%)\n\n\n\nGeth setup\n\n\nGeth is used to insert your machine as a node in the Ethereum network.\nYou will be able to create a new local account (wallet) and contribute with Ethminer software in the transaction validation process.\n\n\n- you need a good editor and git installed on your system\n  $ sudo apt-get install vim\n  $ sudo apt-get install git\n\n- move to your desktop and create a folder:\n  $ mkdir go-ethereum\n  $ cd go-ethereum\n  $ git clone https://github.com/ethereum/go-ethereum\n  $ sudo apt-get install -y build-essential libgmp3-dev golang\n\n- add some tuning and environment variables:\n  $ export GO_OPENCL=true\n  $ export GPU_MAX_ALLOC_PERCENT=95\n\n- compile geth:\n  $ cd go-ethereum\n  $ make geth\n\n- if everything goes well try in the same folder:\n  $ build/bin/geth gpuinfo\n  and you will be able to see your graphic card infos\n\n\n\nEthminer setup\n\n\n- sudo add-apt-repository ppa:ethereum/ethereum-qt\n  sudo add-apt-repository ppa:ethereum/ethereum\n  sudo add-apt-repository ppa:ethereum/ethereum-dev\n  sudo apt-get update\n  sudo apt-get install cpp-ethereum\n\n\n\nManaging accounts\n\n\nYour account is the place where you will be rewarded for your contribution in the transaction validation process.\n\n\nYou can create an account (\"wallet\") in different ways locally with geth or with third part services like an amazing Google Chrome extension called jaxx.\n\n\nThose will provide you an address that you will use to mine, because the reward has to be store somewhere.\n\n\nLocally\n\n\n- move to: $ cd ~/Desktop/go-ethereum/go-ethereum\n  and: $ ~/Desktop/go-ethereum/go-ethereum build/bin/geth account new\n\n\n\nCommands\n\n\nSet of useful commands\n\n\n- move to:\n  $ cd ~/Desktop/go-ethereum/go-ethereum\n  and start the geth console:\n  $ ~/Desktop/go-ethereum/go-ethereum build/bin/geth --fast\n  (starting up your local node and blockchain sync)\n\n- open a new terminal tab:\n  $ cd ~/Desktop/go-ethereum/go-ethereum build/bin/geth attach\n  (opening in a new tab the geth console)\n\n\n\nIn the geth console\n\n\n- \n web3.eth.coinbase (checking your account address)\n- \n web3.fromWei(eth.getBalance(eth.coinbase), \"ether\") (check your wallet balance)\n\n\n\nIf you started the local node with geth in a new terminal tab you can start mining in solo mode with ethminer\n\n\n- $ ethminer -G -M (gpu benchmark, not require geth running)\n- $ ethminer -G (start only when geth --fast console print out that the sync has been finish)\n\n\n\nTo start pool mining (that means to attach your hash rate to other people and have also partials reward)\n\n\n- ethminer -G -F\n  http://eth1.nanopool.org:8888/yourAddress/nameOfYourMiner/yourEmailForGetNotifications\n  (not requiere geth running)\n\n\n\nEthminer tuning\n\n\nReading on the internet we find out some interesting ethminer configuration.\nWhen running ethminer add this for nvidia cards:\n\n\n- --cl-global-work 16384 (4096 or 8192 for CUDA mode)\n  \u2014-cl-local-work 64, 128 or 256 depending on card (128 for CUDA mode)\n  -\u2014farm-recheck 200 according to most pools.\n\n\n\nSo the command could be:\n\n\n- ethminer -G -F\n  http://eth1.nanopool.org:8888/yourAddress/nameOfYourMiner/yourEmailForGetNotifications --cl-local-work 128 --cl-global-work 4096 --farm-recheck 200\n\n\n\nUtils\n\n\nAs already mentioned a good idea could be signing up in a crypto currency exchange on the internet so you can change your ethereum reward in bitcoin or $, \u20ac, etc. like\n\n\n- https://www.kraken.com\n- https://poloniex.com/\n- https://www.bitfinex.com/\n\n\n\nSome links\n\n\n- https://ethereum.gitbooks.io/frontier-guide/content/getting_a_client.html\n- http://nanopool.org/help\n\n\n\nPool experience\n\n\nWe are active in different telegram chat and chatting with other miners the most mentioned pool service are:\n\n\n- http://dwarfpool.com/\n- https://eth.suprnova.cc/\n- http://nanopool.org/\n- http://weipool.org/\n- http://ethpool.org/\n- https://ethereumpool.co/\n- http://eth.unitedminers.cloud/\n\n\n\nEth proxy\n\n\nSince we have not had much luck with nanopool even if their assistance is very good we decided to try Dwarfpool\n\n\nPLUS,\n\n\naccording to their documentation, Stratum-Proxy for Ethereum.\n\n\nYou just need to:\n\n\n- clone the repository into your Desktop or wherever:\n  $ git clone https://github.com/Atrides/eth-proxy.git\n- install dependency with:\n  $ sudo apt-get install python-twisted\n- move inside the repository folder and change the config data in ethproxy.conf like this:\n  $ sudo vim ethproxy.conf\n\n  # Select Ethereum ETH or Expanse EXP\n  COIN = \"ETH\"\n\n  # Host and port for your workers\n  HOST = \"0.0.0.0\"\n  PORT = 8080\n\n  # Coin address where money goes\n  WALLET = \"yourWallet\"\n\n  # To donate please use wallet \"0xea7263feb7d8a8ab0a11eedd8f1ce04412ab0820\"\n\n  # It's useful for individually monitoring and statistic\n  ENABLE_WORKER_ID = True\n\n  # On DwarfPool you have option to monitor your workers via email.\n  # If WORKER_ID is enabled, you can monitor every worker/rig separately.\n  MONITORING = True\n  MONITORING_EMAIL = \"yourEmail\"\n\n  # Main pool\n  POOL_HOST = \"eth-eu.dwarfpool.com\"\n  POOL_PORT = 8008\n\n  # Failover pool\n  POOL_FAILOVER_ENABLE = True\n\n  POOL_HOST_FAILOVER1 = \"eth-ru.dwarfpool.com\"\n  POOL_PORT_FAILOVER1 = 8008\n\n  POOL_HOST_FAILOVER2 = \"eth-us.dwarfpool.com\"\n  POOL_PORT_FAILOVER2 = 8008\n\n  POOL_HOST_FAILOVER3 = \"eth-hk.dwarfpool.com\"\n  POOL_PORT_FAILOVER3 = 8008\n\n  # Logging\n  LOG_TO_FILE = True\n\n  # Enable debug\n  DEBUG = False\n\n- save it, close it and run it from the repository folder with:\n  $ python ethproxy.py\n\n- run your miner with:\n  ethminer -G -F http://127.0.0.1:8080 --cl-local-work 128 --cl-global-work 4096 --farm-recheck 200\n\n\n\nReleated link:\n\n\n- https://bitcointalk.org/index.php?topic=1200891\n- https://github.com/Atrides/eth-proxy", 
            "title": "Eth Mining"
        }, 
        {
            "location": "/ethmining/#ethereum-mining", 
            "text": "Date: 13/03/16, from Turin, Italy with  3.", 
            "title": "Ethereum Mining"
        }, 
        {
            "location": "/ethmining/#introduction", 
            "text": "If your goal is to start mining in pool quickly you can just skip geth installation and start with:  - graphic card drivers\n- a wallet (google chrome extension --  jaxx --  gives you back a brand new wallet address)\n- ethminer setup  and you can start mining just running:  - ethminer -G -F\n  http://eth1.nanopool.org:8888/yourAddress/nameOfYourMiner/yourEmailForGetNotifications  We also recommend that you subscribe to a bitcoin exchange to make the purchase of your currency.", 
            "title": "Introduction"
        }, 
        {
            "location": "/ethmining/#our-test-environment", 
            "text": "- Intel i5 CPU\n- 12Gb ram\n- SSD 256Gb\n- Nvidia GTX 770 [driver 352.79 - openCL 1.2]\n- 500W power supply\n- Ubuntu 14.04 - 64bit", 
            "title": "Our test environment"
        }, 
        {
            "location": "/ethmining/#nvidia-driver-setup", 
            "text": "- find out the model of your graphics card:\n  $ sudo lspci -vnn | grep -i VGA -A 12\n\n- check your graphic card drivers:\n  http://www.nvidia.com/Download/index.aspx\n\n- add xorg-edgers ppa that provides very latest nvidia\n  drivers:\n  $ sudo add-apt-repository ppa:xorg-edgers/ppa -y\n  $ sudo apt-get update\n\n- grab your drivers with:\n  $ sudo apt-get install nvidia-352", 
            "title": "Nvidia driver setup"
        }, 
        {
            "location": "/ethmining/#nvidia-cuda-toolkit-setup", 
            "text": "- download cuda drivers:\n  https://developer.nvidia.com/cuda-downloads\n  select Linux, x86_64, Ubuntu, 14_04 and Deb(local)\n\n- move to your download folder:\n  $ sudo dpkg -i cuda-repo-ubuntu1404_7.5-18_amd64.deb\n  $ sudo apt-get update\n  $ sudo apt-get install cuda\n\n- reboot the system", 
            "title": "Nvidia cuda toolkit setup"
        }, 
        {
            "location": "/ethmining/#nvidia-fan", 
            "text": "- sudo nvidia-xconfig\n- sudo nvidia-xconfig --cool-bits=4\n- reboot system  or  - sudo apt-get install nvclock\n- nvclock -f -F 70 (to change GPU fan speed 70%)", 
            "title": "Nvidia fan"
        }, 
        {
            "location": "/ethmining/#geth-setup", 
            "text": "Geth is used to insert your machine as a node in the Ethereum network.\nYou will be able to create a new local account (wallet) and contribute with Ethminer software in the transaction validation process.  - you need a good editor and git installed on your system\n  $ sudo apt-get install vim\n  $ sudo apt-get install git\n\n- move to your desktop and create a folder:\n  $ mkdir go-ethereum\n  $ cd go-ethereum\n  $ git clone https://github.com/ethereum/go-ethereum\n  $ sudo apt-get install -y build-essential libgmp3-dev golang\n\n- add some tuning and environment variables:\n  $ export GO_OPENCL=true\n  $ export GPU_MAX_ALLOC_PERCENT=95\n\n- compile geth:\n  $ cd go-ethereum\n  $ make geth\n\n- if everything goes well try in the same folder:\n  $ build/bin/geth gpuinfo\n  and you will be able to see your graphic card infos", 
            "title": "Geth setup"
        }, 
        {
            "location": "/ethmining/#ethminer-setup", 
            "text": "- sudo add-apt-repository ppa:ethereum/ethereum-qt\n  sudo add-apt-repository ppa:ethereum/ethereum\n  sudo add-apt-repository ppa:ethereum/ethereum-dev\n  sudo apt-get update\n  sudo apt-get install cpp-ethereum", 
            "title": "Ethminer setup"
        }, 
        {
            "location": "/ethmining/#managing-accounts", 
            "text": "Your account is the place where you will be rewarded for your contribution in the transaction validation process.  You can create an account (\"wallet\") in different ways locally with geth or with third part services like an amazing Google Chrome extension called jaxx.  Those will provide you an address that you will use to mine, because the reward has to be store somewhere.  Locally  - move to: $ cd ~/Desktop/go-ethereum/go-ethereum\n  and: $ ~/Desktop/go-ethereum/go-ethereum build/bin/geth account new", 
            "title": "Managing accounts"
        }, 
        {
            "location": "/ethmining/#commands", 
            "text": "Set of useful commands  - move to:\n  $ cd ~/Desktop/go-ethereum/go-ethereum\n  and start the geth console:\n  $ ~/Desktop/go-ethereum/go-ethereum build/bin/geth --fast\n  (starting up your local node and blockchain sync)\n\n- open a new terminal tab:\n  $ cd ~/Desktop/go-ethereum/go-ethereum build/bin/geth attach\n  (opening in a new tab the geth console)  In the geth console  -   web3.eth.coinbase (checking your account address)\n-   web3.fromWei(eth.getBalance(eth.coinbase), \"ether\") (check your wallet balance)  If you started the local node with geth in a new terminal tab you can start mining in solo mode with ethminer  - $ ethminer -G -M (gpu benchmark, not require geth running)\n- $ ethminer -G (start only when geth --fast console print out that the sync has been finish)  To start pool mining (that means to attach your hash rate to other people and have also partials reward)  - ethminer -G -F\n  http://eth1.nanopool.org:8888/yourAddress/nameOfYourMiner/yourEmailForGetNotifications\n  (not requiere geth running)", 
            "title": "Commands"
        }, 
        {
            "location": "/ethmining/#ethminer-tuning", 
            "text": "Reading on the internet we find out some interesting ethminer configuration.\nWhen running ethminer add this for nvidia cards:  - --cl-global-work 16384 (4096 or 8192 for CUDA mode)\n  \u2014-cl-local-work 64, 128 or 256 depending on card (128 for CUDA mode)\n  -\u2014farm-recheck 200 according to most pools.  So the command could be:  - ethminer -G -F\n  http://eth1.nanopool.org:8888/yourAddress/nameOfYourMiner/yourEmailForGetNotifications --cl-local-work 128 --cl-global-work 4096 --farm-recheck 200", 
            "title": "Ethminer tuning"
        }, 
        {
            "location": "/ethmining/#utils", 
            "text": "As already mentioned a good idea could be signing up in a crypto currency exchange on the internet so you can change your ethereum reward in bitcoin or $, \u20ac, etc. like  - https://www.kraken.com\n- https://poloniex.com/\n- https://www.bitfinex.com/  Some links  - https://ethereum.gitbooks.io/frontier-guide/content/getting_a_client.html\n- http://nanopool.org/help", 
            "title": "Utils"
        }, 
        {
            "location": "/ethmining/#pool-experience", 
            "text": "We are active in different telegram chat and chatting with other miners the most mentioned pool service are:  - http://dwarfpool.com/\n- https://eth.suprnova.cc/\n- http://nanopool.org/\n- http://weipool.org/\n- http://ethpool.org/\n- https://ethereumpool.co/\n- http://eth.unitedminers.cloud/", 
            "title": "Pool experience"
        }, 
        {
            "location": "/ethmining/#eth-proxy", 
            "text": "Since we have not had much luck with nanopool even if their assistance is very good we decided to try Dwarfpool  PLUS,  according to their documentation, Stratum-Proxy for Ethereum.  You just need to:  - clone the repository into your Desktop or wherever:\n  $ git clone https://github.com/Atrides/eth-proxy.git\n- install dependency with:\n  $ sudo apt-get install python-twisted\n- move inside the repository folder and change the config data in ethproxy.conf like this:\n  $ sudo vim ethproxy.conf\n\n  # Select Ethereum ETH or Expanse EXP\n  COIN = \"ETH\"\n\n  # Host and port for your workers\n  HOST = \"0.0.0.0\"\n  PORT = 8080\n\n  # Coin address where money goes\n  WALLET = \"yourWallet\"\n\n  # To donate please use wallet \"0xea7263feb7d8a8ab0a11eedd8f1ce04412ab0820\"\n\n  # It's useful for individually monitoring and statistic\n  ENABLE_WORKER_ID = True\n\n  # On DwarfPool you have option to monitor your workers via email.\n  # If WORKER_ID is enabled, you can monitor every worker/rig separately.\n  MONITORING = True\n  MONITORING_EMAIL = \"yourEmail\"\n\n  # Main pool\n  POOL_HOST = \"eth-eu.dwarfpool.com\"\n  POOL_PORT = 8008\n\n  # Failover pool\n  POOL_FAILOVER_ENABLE = True\n\n  POOL_HOST_FAILOVER1 = \"eth-ru.dwarfpool.com\"\n  POOL_PORT_FAILOVER1 = 8008\n\n  POOL_HOST_FAILOVER2 = \"eth-us.dwarfpool.com\"\n  POOL_PORT_FAILOVER2 = 8008\n\n  POOL_HOST_FAILOVER3 = \"eth-hk.dwarfpool.com\"\n  POOL_PORT_FAILOVER3 = 8008\n\n  # Logging\n  LOG_TO_FILE = True\n\n  # Enable debug\n  DEBUG = False\n\n- save it, close it and run it from the repository folder with:\n  $ python ethproxy.py\n\n- run your miner with:\n  ethminer -G -F http://127.0.0.1:8080 --cl-local-work 128 --cl-global-work 4096 --farm-recheck 200  Releated link:  - https://bitcointalk.org/index.php?topic=1200891\n- https://github.com/Atrides/eth-proxy", 
            "title": "Eth proxy"
        }
    ]
}